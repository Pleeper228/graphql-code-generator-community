input ActivateUserInput {
  id: String!
}

type AdGroup {
  clicks: Float
  cpc: CurrencyDTO
  cpv: CurrencyDTO
  ctr: Float
  externalAdGroupId: String!
  externalCampaignId: String!
  impressions: Float
  name: String!
  platform: PlatformEnum!
  totalSpend: CurrencyDTO
  viewRate: Float
  views: Float
}

"""
An engagement metric for an adgroup.
"""
type AdGroupEngagementMetric {
  """
  The ad group to which the metric applies.
  """
  adGroup: AdGroupWithMetrics!

  """
  The date interval to which this metric applies.
  """
  interval: Interval!

  """
  The value for common metrics, like likes, reactions, shares.
  """
  metric: CommonEngagementMetric!
}

"""
A performance metric for an adgroup.
"""
type AdGroupPerformanceMetric {
  """
  The ad group to which the metric applies.
  """
  adGroup: AdGroupWithMetrics!

  """
  The date interval to which this metric applies.
  """
  interval: Interval!

  """
  The value for common metrics, like clicks, impressions, or conversions.
  """
  metric: CommonPerformanceMetric!
}

"""
An Ad Group.
"""
type AdGroupWithMetrics {
  """
  The adgroup id.
  """
  id: ID!

  """
  The adgroup name.
  """
  name: String!
}

type AdMixCampaign {
  budget: Float!
  id: Float!
  monthlyBudget: [Float!]!
  name: String!
  platformAllocations: [PlatformAllocation!]!
  proposalId: Float!
  status: String!
}

"""
A performance metric for an ad.
"""
type AdPerformanceMetric {
  """
  The campaign to which the metric applies.
  """
  ad: AdWithMetrics!

  """
  The date interval to which this metric applies.
  """
  interval: Interval!

  """
  The value for common metrics, like clicks, impressions, or conversions.
  """
  metric: CommonPerformanceMetric!
}

"""
An Ad.
"""
type AdWithMetrics {
  """
  The creative associated with the ad.
  """
  creative: Creative

  """
  The ad id.
  """
  id: ID!

  """
  The ad platform.
  """
  platform: Platform!
}

"""
Response type for `mutation addAllocationToLineItem`.
"""
type AddAllocationToLineItemResponse {
  """
  The allocation that was added to the line item.
  """
  allocation: LineItemAllocation!

  """
  The line item that had the allocation added.
  """
  lineItem: LineItem!
}

"""
Input for `AddContentToCreative` mutation.
"""
input AddContentToCreativeInput {
  """
  The type of the creative
  """
  contentType: CreativeContentType!

  """
  The dapi files creative id to add the content to
  """
  creativeId: ID!

  """
  The url of the content
  """
  url: String!
}

input AddMessageInput {
  body: String
  conversationId: Int!
  fileIds: [Int!] = []
  isInternal: Boolean
  notificationData: NotificationDataInput
  title: String
}

input AddMessageToConversationInput {
  authToken: ConversationAuthInput
  body: String!
  conversationId: Float!
  fileIds: [Int!]
  isInternal: Boolean
  title: String
}

input AddMessageToConversationsInput {
  authToken: ConversationAuthInput

  """
  The author of the message. Can only be used when authenticated via internal request token.
  """
  authorId: ID
  messages: [AddMessageInput!]!
}

type AdditionalReport {
  advertiserId: Int!
  created: DateTime!
  id: PositiveInt!
  iframeUrl: String!
  name: String!
  updated: DateTime!
}

"""
An advertiser.
"""
type Advertiser {
  additionalReports: [AdditionalReport!]!
  created: DateTime!
  createdBy: User
  createdUserId: String

  """
  The guid of the Advertiser.  The guid is a wrapper for either the advertiser.id or the advertiser.mongoId
  in the hierarchy-service.  We're using this value because it streamlines the usage of 'ID!' in the schema.
  """
  guid: ID!
  hierarchy: Hierarchy
  hierarchyId: Float!

  """
  The advertiser id.
  """
  id: Float!
  industry: String!
  keywords: [String!]!
  locations: [Location!]
  logoFile: File
  logoFileId: Float
  logoUri: String
    @deprecated(reason: "Use logoFile, which is federated and resolved through the subGraph")
  microIndustries: [String!]!
  mongoId: String
  name: String!
  productRates(effectiveDate: DateTime!, productTypes: [ProductTypeEnum!]!): [ProductRateResponse!]!
  proposals: [ProposalType!]!
  updated: DateTime!
  website: String!
}

"""
A performance metric for an advertiser.
"""
type AdvertiserPerformanceMetric {
  """
  The advertiser to which the metric applies.
  """
  advertiser: Advertiser!

  """
  The date interval to which this metric applies.
  """
  interval: Interval!

  """
  The value for common metrics, like clicks, impressions, or conversions.
  """
  metric: CommonPerformanceMetric!
}

"""
Federated `AdvertiserProductListing` entity.
"""
type AdvertiserProductListing {
  """
  The ID of the advertiser the product is listed for.
  """
  advertiserId: ID!

  """
  The goal types when ordered for the advertiser.
  """
  goalTypes: [AllocationGoalType!]!

  """
  The name to display to end users.
  The original product name is located at `product.name`.
  """
  name: String!

  """
  The product.
  """
  product: ProductResponse!

  """
  The ID of the product.
  """
  productId: ID!

  """
  The rates when ordered for the advertiser.
  """
  rateCard: RateCard!

  """
  The ID of the rate card.
  """
  rateCardId: ID!

  """
  When `ENABLED`, the product can be ordered for the advertiser.
  """
  status: HierarchyProductStatus!
}

"""
Filter input for `advertiserProductListings` query.
"""
input AdvertiserProductListingsFilterInput {
  """
  Select product listings for the specified advertiser ID.
  """
  advertiserId: ID!

  """
  Select product listings where the product has any of the specified classes.
  """
  advertisingProductClasses: [String!]

  """
  Select product listings where the product has any of the specified lines.
  """
  advertisingProductLines: [String!]

  """
  Select product listings where the product has any of the specified lines.
  """
  advertisingProductTypes: [String!]

  """
  Select product listings for the specified products.
  """
  productIds: [ID!]

  """
  Filter product listings with a `product.name` similar to this one.
  """
  query: String

  """
  Select product listings with the specified status.
  """
  status: HierarchyProductStatus
}

"""
Response type for `advertiserProductListings` query.
"""
type AdvertiserProductListingsResponse {
  """
  Information about the page.
  """
  pageInfo: PageInfo!

  """
  The page of results.
  """
  results: [AdvertiserProductListing!]!
}

"""
Sort input for `advertiserProductListings` query.
"""
input AdvertiserProductListingsSortInput {
  """
  The direction of the sorting.
  """
  direction: SortDirection = ASC

  """
  The field by which results are sorted.
  """
  field: ProductListingSortableField = NAME
}

"""
Federated `AdvertisingProduct` entity.
"""
type AdvertisingProduct implements ProductResponse {
  advertisingClass: String!
  advertisingLine: String!
  advertisingType: String!
  category: ProductCategory!
  created: DateTime!
  description: String
  id: ID!
  legacyProductKeys: [String!]
  name: String!
  platforms: [Platform!]!
  productForms: [ProductForm!]!
  type: ProductType!
  updated: DateTime!
}

input AdvertisingProductRequest {
  advertisingClass: String!
  advertisingLine: String!
  advertisingType: String!
  description: String
  legacyProductKeys: [String!]
  name: String!
  platforms: [Platform!]
  productFormAppIds: [ID!]
  type: ProductType = STANDARD
}

"""
Fields that an `AdvertisingProduct` can be sorted by.
"""
enum AdvertisingProductSortableField {
  """
  Sort by the advertising product class.
  """
  ADVERTISING_PRODUCT_CLASS

  """
  Sort by the advertising product line.
  """
  ADVERTISING_PRODUCT_LINE

  """
  Sort by the advertising product type.
  """
  ADVERTISING_PRODUCT_TYPE

  """
  Sort by the date the product was created.
  """
  CREATED

  """
  Sort by the product name.
  """
  NAME

  """
  Sort by the date the product was last updated.
  """
  UPDATED
}

"""
Ways in which `advertisingProducts` query results can be filtered.
"""
input AdvertisingProductsFilterInput {
  """
  Select advertising products where the product has any of the specified classes.
  """
  advertisingProductClasses: [String!]

  """
  Select advertising products where the product has any of the specified lines.
  """
  advertisingProductLines: [String!]

  """
  Select advertising products where the product has any of the specified lines.
  """
  advertisingProductTypes: [String!]

  """
  Select advertising products in the specified list.
  """
  ids: [ID!]

  """
  Filter advertising products with query on `name`.
  """
  query: String
}

"""
Response type for `query advertisingProducts`.
"""
type AdvertisingProductsResponse {
  """
  Information about the page.
  """
  pageInfo: PageInfo!

  """
  The page of results returned.
  """
  pageNumber: Int! @deprecated(reason: "Use pageInfo { pageNumber }")

  """
  The number of results returned per page.
  """
  pageSize: Int! @deprecated(reason: "Use pageInfo { pageSize }")

  """
  The page of results.
  """
  results: [AdvertisingProduct!]!

  """
  The total number of results.
  """
  totalCount: Int! @deprecated(reason: "Use pageInfo { totalCount }")

  """
  The total number of pages.
  """
  totalPages: Int! @deprecated(reason: "Use pageInfo { totalPages }")
}

"""
How to sort `advertisingProducts` query results.
"""
input AdvertisingProductsSortInput {
  """
  The direction of the sorting.
  """
  direction: SortDirection!

  """
  The field by which results are sorted.
  """
  field: AdvertisingProductSortableField!
}

type AggregateExportJob {
  aggregateExportJobType: AggregateExportJobTypeEnum!
  completionNotes: String!
  externalId: String!
  jobId: Float!
  requestorId: String!
  status: AggregateExportJobTypeStatusEnum!
}

"""
Aggregate export job types
"""
enum AggregateExportJobTypeEnum {
  EXPORT_ADVERTISING_PRODUCTS
  EXPORT_PRODUCTS
  EXPORT_USERS
  ORDER_DETAIL_SAVED_VIEW
}

"""
Status types for determining a given job's state
"""
enum AggregateExportJobTypeStatusEnum {
  COMPLETED
  ERROR
  NEW
  PENDING
}

type AggregateExportResult {
  jobId: Float!
}

enum AllocationGoalSubtype {
  MAKE_GOOD
  NONE
  PROMOTION
  RENEWAL
}

enum AllocationGoalType {
  BUDGET
  CLICK
  IMPRESSION
  VIEW
}

"""
describes the date range for an analytics value
"""
type AnalyticsInterval {
  """
  inclusive end date
  """
  endDate: Date!

  """
  inclusive start date
  """
  startDate: Date!
}

"""
An type representing a location
"""
type AnalyticsLocation {
  """
  The mapbox boundary
  """
  boundary: MapboxBoundary

  """
  The city
  """
  city: String

  """
  The country
  """
  country: String

  """
  The dma
  """
  dma: String

  """
  The mapbox dma boundary
  """
  dmaBoundary: Dma

  """
  The dma display name
  """
  dmaDisplayName: String

  """
  The location type identifier associated with this location type
  """
  locationType: AnalyticsLocationTypeIdentifier!

  """
  The region
  """
  region: String

  """
  The zip code
  """
  zip: String
}

"""
A type representing a type of location
"""
type AnalyticsLocationType {
  """
  The display name for the location type
  """
  displayName: String!

  """
  The location type identifier associated with this location type
  """
  locationTypeIdentifier: AnalyticsLocationTypeIdentifier!
}

"""
A location type representing a specific geo granularity. Typically used for common geo metrics
"""
enum AnalyticsLocationTypeIdentifier {
  CITY
  DMA
  REGION
  ZIP
}

"""
Describes the means by which ad content is presented to users.
"""
type AnalyticsProductType {
  """
  A name for the product type that can be presented to end-users.
  """
  displayName: String!

  """
  The identifier for this product type.
  """
  identifier: AnalyticsProductTypeIdentifier!
}

"""
Describes the means by which ad content is presented to users.
"""
enum AnalyticsProductTypeIdentifier {
  """
  Ad content served through the Google Ad Manager DSP.
  """
  ADMANAGER

  """
  Ad content presented to users in alternative venues (e.g., cannabis) through DSPs like StackAdapt.
  """
  ALT_NETWORK

  """
  Ad content presented to users via the Bing DSP.
  """
  BING

  """
  Static ad content, usually managed through Tradedesk.
  """
  DISPLAY

  """
  Ad content presented to users through Google Display Network, which is a group of more than 2 million websites, videos, and apps where your Google Ads can appear. Managed by Google Ads.
  """
  GDN

  """
  Ad content presented to users among search results, usually managed by Google Ads.
  """
  SEARCH

  """
  Ad content presented to users through social networks like Facebook and Instagram.
  """
  SOCIAL

  """
  Multimedia ad content -- which could be streaming tv, audio, or pre-roll -- usually managed through Tradedesk.
  """
  VIDEO

  """
  Ad content presented to users through YouTube, managed by Google Ads.
  """
  YOUTUBE
}

enum AnalyticsResolution {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

enum ApiAnalyticsMediaType {
  ADMANAGER
  ALT_NETWORK
  BING
  DISPLAY
  GDN
  SEARCH
  SOCIAL
  VIDEO
  YOUTUBE
}

input ApproveCampaignData {
  campaignType: CampaignTypes!
  id: Float!
}

interface BaseAdGroupPerformanceValue {
  adGroupId: String!
  adGroupName: String!
}

interface BaseBrandValue {
  brandId: String
  clicks: Float!
  ctr: Float!
  impressions: Float!
}

interface BaseCampaignPerformanceValue {
  campaignId: String!
  campaignName: String
}

interface BaseConversionValue {
  conversions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  trackingLabelName: String
  trackingLabelSequence: Float!
}

interface BaseDeviceTypeValue {
  clicks: Float!
  ctr: Float!
  deviceType: TtdDeviceTypeEnum!
  impressions: Float!
}

interface BaseDisplayPerformanceValue {
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
}

interface BaseFacebookPerformanceValue {
  clicks: Float!
  comments: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  engagements: Float!
  impressions: Float!
  likes: Float!
  shares: Float!
  spend: CurrencyDTO
  viewRate: Float!
  views: Float!
}

interface BaseGdnPerformanceValue {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
}

interface BaseGeoValue {
  boundary: MapboxBoundary
  city: String
  clicks: Float!
  conversions: Float!
  coordinates: LatLongType
  country: String!
  impressions: Float!
  location: String!
  region: String!
  zip: String
}

interface BaseGoogleAdsDTO {
  searchImpressionShare: Float!
}

interface BaseGoogleCreativeValue {
  adName: String!
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  creativeId: String!
  ctr: Float!
  impressions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

interface BaseGoogleDeviceTypeValue {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  ctr: Float!
  deviceType: GoogleDeviceTypeEnum!
  impressions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

interface BaseMetaCreativeValue {
  adName: String!
  clicks: Float!
  comments: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  creativeId: String!
  ctr: Float!
  engagements: Float!
  impressions: Float!
  likes: Float!
  reactions: Float!
  shares: Float!
  spend: CurrencyDTO
  viewRate: Float!
  views: Float!
}

interface BaseRollupPerformanceValue {
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  viewCompletionRate: Float!
  viewsCompleted: Float!
  viewsStarted: Float!
}

interface BaseSearchPerformanceValue {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  impressions: Float!
  spend: CurrencyDTO
}

interface BaseTimeOfDayResponse {
  interval: TimeOfDayInterval!
}

interface BaseTimeOfDayValue {
  clicks: Float!
  ctr: Float!
  impressions: Float!
}

interface BaseTtdCreativeValue {
  clicks: Float!
  conversions: Float!
  creativeId: String!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
}

interface BaseVideoPerformanceValue {
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
  viewsStarted: Float!
}

interface BaseYoutubePerformanceValue {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  impressions: Float!
  spend: CurrencyDTO
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

type BasicTargeting {
  description: String
  targets: [String!]!
}

type BehavioralTTDTarget {
  type: String!
  values: [TargetValues!]
}

enum BillingType {
  CPM
  CPV
  MONTHLY_FLAT_FEE
  MONTHLY_MGMT_FEE
  SETUP_FEE
}

type Brand {
  file: File
  id: Float!
  logoFileId: String
  name: String!
}

"""
A type indicating status of a bulk write.
"""
type BulkWriteResult {
  """
  Whether the bulk write was successful.
  """
  success: Boolean!
}

type BusinessHour {
  closeTime: String
  created: DateTime!
  day: Int!
  id: Float!
  locationId: Int!
  openTime: String
  updated: DateTime!
}

type CampaignAggregations {
  largeScreenCompletionRate: Float
  largeScreenImpressions: Float
  smallScreenCompletionRate: Float
  smallScreenImpressions: Float
  totalCompletionRate: Float
  totalImpressions: Float
}

type CampaignForecast {
  availableBudget: Float
  devices: Range
  impressions: Range
  isValid: Boolean
}

input CampaignForecastInput {
  availableBudget: Float
  devices: RangeInput
  impressions: RangeInput
  isValid: Boolean
}

type CampaignPace {
  campaignId: Int!
  clicks: Float
  cpc: CurrencyDTO
  cpv: CurrencyDTO
  ctr: Float
  externalCampaignId: String
  impressions: Float
  platform: PlatformEnum
  totalSpend: CurrencyDTO
  viewRate: Float
  views: Float
}

"""
A performance metric for a campaign.
"""
type CampaignPerformanceMetric {
  """
  The campaign to which the metric applies.
  """
  campaign: CampaignWithMetrics!

  """
  The date interval to which this metric applies.
  """
  interval: Interval!

  """
  The value for common metrics, like clicks, impressions, or conversions.
  """
  metric: CommonPerformanceMetric!
}

"""
Possible statuses for a campaign
"""
enum CampaignStatus {
  DRAFT
  READY_FOR_SALE
  SOLD
  UNDER_REVIEW
}

"""
All campaign types on a proposal
"""
enum CampaignTypes {
  adMixCampaigns
  manualCustomCampaigns
  manualDisplayCampaigns
  manualEmailCampaigns
  manualGeofencingCampaigns
  manualSEMCampaigns
  manualSEOCampaigns
  manualSocialMediaCampaigns
  manualSpecializedCampaigns
  manualStreamingAudioCampaigns
  manualVideoCampaigns
}

"""
A campaign.
"""
type CampaignWithMetrics {
  """
  The campaign id.
  """
  id: ID!

  """
  The campaign name.
  """
  name: String!
}

"""
Ways in which `campaign` query results can be filtered.
"""
input CampaignsFilterInput {
  """
  Select campaigns associated with any of the specified line items.
  """
  lineItemIds: [ID!]
}

type CensusDataType {
  allocationOfMortgageStatus(locations: [String!]!): [NameValueDataType!]
  allocationOfRace(locations: [String!]!): [NameValueDataType!]
  allocationOfSex(locations: [String!]!): [NameValueDataType!]
  employmentStatus(locations: [String!]!): [NameValueDataType!]
  householdIncome(locations: [String!]!): [NameValueDataType!]
  householdType(locations: [String!]!): [NameValueDataType!]
  householdTypeBySize(locations: [String!]!): [NameValueDataType!]
  medianAgeBySex(locations: [String!]!): [NameValueDataType!]
  sexByEducationalAttainment(locations: [String!]!): [NameValueDataType!]
  tenure(locations: [String!]!): [NameValueDataType!]
  totalPopulation(locations: [String!]!): Float
  yearStructureBuilt(locations: [String!]!): [NameValueDataType!]
}

"""
Input for `clearTradedeskCampaignConversionTrackingLabels` mutation.
"""
input ClearTradedeskCampaignConversionTrackingLabelsInput {
  """
  A list of Platform Campaign IDs whose locally stored Tradedesk Campaign Conversion Tracking Label Sets should be
  cleared.
  """
  platformCampaignIds: [String!]!
}

"""
Input for `cloneLineItem`.
"""
input CloneLineItemInput {
  """
  The ID of the line item to clone
  """
  id: ID!

  """
  An optional name to assign the cloned line item.

  When null, the cloned line item will have the name: `(CLONE) - ${original line item name}`
  """
  name: String
}

"""
Input for `cloneOrder`.
"""
input CloneOrderInput {
  """
  The ID of the order to clone
  """
  id: ID!

  """
  An optional name to assign the cloned order.

  When null, the cloned order will have the name: `(CLONE) - ${original order name}`
  """
  name: String
}

"""
An set of common engagement metrics
"""
type CommonEngagementMetric {
  """
  The total number of comments.
  """
  comments: Int!

  """
  The total number of engagements.
  """
  engagements: Int!

  """
  The total number of likes.
  """
  likes: Int!

  """
  The total number of link clicks.
  """
  linkClicks: Int!

  """
  The total number of reactions
  """
  reactions: Int!

  """
  The total number of shares.
  """
  shares: Int!

  """
  The total number of views.
  """
  views: Int!
}

"""
A common geo metric
"""
type CommonGeoMetric {
  """
  The total number of clicks.
  """
  clicks: Int!

  """
  The conversion rate (conversions / clicks).
  """
  conversionRate: Float!

  """
  The total number of conversions.
  """
  conversions: Float!

  """
  Ad spend per click.
  """
  costPerClick: Currency!

  """
  Ad spend per conversion.
  """
  costPerConversion: Currency!

  """
  The click through rate (clicks / impressions).
  """
  ctr: Float!

  """
  The total number of impressions.
  """
  impressions: Int!

  """
  The total cost of ad spend associated with these metrics.
  """
  spend: Currency!
}

type CommonPerformanceMetric {
  """
  The total number of clicks.
  """
  clicks: Int!

  """
  The conversion rate (conversions / clicks).
  """
  conversionRate: Float!

  """
  The total number of conversions.
  """
  conversions: Float!

  """
  Ad spend per click.
  """
  costPerClick: Currency!

  """
  Ad spend per conversion.
  """
  costPerConversion: Currency!

  """
  The click through rate (clicks / impressions).
  """
  ctr: Float!

  """
  The total number of impressions.
  """
  impressions: Int!

  """
  The total cost of ad spend associated with these metrics.
  """
  spend: Currency!

  """
  The view rate (views / views started).
  """
  viewRate: Float!

  """
  The total number of video views.
  """
  views: Int!

  """
  The number of times a video started playback.
  """
  viewsStarted: Int!
}

type ContentTTDTarget {
  type: String!
  values: [String!]
}

input Context {
  """
  The default notification data to be sent whenever a message is added to the conversation.
  """
  notificationData: NotificationDataInput

  """
  The `refereceUrl` for notifications that are sent whenever a message is added to the conversation.
  """
  referenceUrl: String

  """
  The `subject` for emails that are sent whenever a message is added to the conversation.
  """
  subject: String
}

type ContextNotificationData {
  """
  The default `secondaryText` for user notifications that are created whenever a message is added to the conversation.
  """
  secondaryText: [String!]
}

type ContextType {
  conversationId: Float!
  created: DateTime!
  id: Int!

  """
  The default notification data for user notifications that are created whenever a message is added to the conversation.
  """
  notificationData: ContextNotificationData

  """
  The `refereceUrl` for user notifications that are created whenever a message is added to the conversation.
  """
  referenceUrl: String

  """
  The `subject` for emails that are sent whenever a message is added to the conversation.
  """
  subject: String
  updated: DateTime!
}

input ConversationAuthInput {
  email: String!
  token: String!
}

input ConversationInput {
  authToken: ConversationAuthInput
  id: Int
}

"""
Federated `ConversationType` entity.
"""
type ConversationType {
  context: ContextType
  created: DateTime!

  """
  The ID of the conversation
  """
  id: Int!
  listenerUserEmails: [String!]!
  listenerUserIds: [String!]!
  listenerUsers: [User!]!

  """
  Find a single message in the conversation by id
  """
  message(id: Int!): MessageType
  messages(cursor: CursorPaginationInput): MessagesResponse!
  referenceUrl: String
  updated: DateTime!
}

input CreateAdMixCampaignInput {
  budget: Float!
  monthlyBudget: [Float!]!
  name: String!
  platformAllocations: [CreatePlatformAllocationInput!]
  status: String!
}

input CreateAdvertiserInput {
  hierarchyId: Float!
  industry: String!
  keywords: [String!]
  microIndustries: [String!]
  name: String!
  website: String!
}

input CreateBusinessHourInput {
  closeTime: String
  day: Int!
  openTime: String
}

"""
Input for `createCampaign`.
"""
input CreateCampaignInput {
  """
  The ID of the campaign on the external platform.
  """
  externalCampaignId: ID

  """
  The ID of the line item this campaign should be associated with.
  """
  lineItemId: ID!

  """
  A human readable name for the campaign.
  """
  name: String

  """
  The name of the platform.
  """
  platform: Platform!
}

"""
Input for `CreateCreativeInput` mutation.
"""
input CreateCreativeInput {
  """
  The name of the creative
  """
  name: String!

  """
  The Platform that the creative belongs to
  """
  platform: Platform!

  """
  The third party ID of the creative associated with the platform.
  """
  platformId: ID!

  """
  The type of the creative
  """
  type: CreativeType!
}

input CreateDirectHubUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

"""
Input for `CreateFile` Mutation.
"""
input CreateFileInput {
  """
  The date/time when the files content will be removed and can no longer be downloaded.
  """
  fileExpiryDate: DateTime

  """
  The extension of the file to store
  """
  fileExtension: String!

  """
  The name of the file to store
  """
  filename: String!
}

input CreateHierarchyInput {
  mongoId: String
  name: String!
  ownerId: String
  parentId: Float!
  shortName: String
  styleColor1: String
  styleColor2: String
  styleLogo: String
}

"""
Input for `createLinkedAdvertiser` mutation.
"""
input CreateLinkedAdvertiserInput {
  """
  The internal ID of the Advertiser to link.
  """
  advertiserId: Int!

  """
  The Platform the Advertiser should be linked to.
  """
  platform: Platform!

  """
  The Platform Advertiser ID the Advertiser should be linked to.
  """
  platformAdvertiserId: String!

  """
  The hierarchy whose integration is the source of the external advertiser being linked.
  """
  sourceHierarchyId: ID!
}

"""
Input for `createManagedOrder`.
"""
input CreateManagedOrderInput {
  """
  The advertiser ID for which the order is being created for.
  """
  advertiserId: ID!

  """
  The user ID that is assigned to the order.
  """
  assigneeUserId: ID

  """
  The user ID that created the order. If null, attempts to fallback to the detected user making the request.
  """
  createdByUserId: ID

  """
  The associated line items to create.
  """
  lineItems: [LineItemInput!]

  """
  The name of the order.
  """
  name: String!

  """
  Custom information specific to the order.
  """
  orderInfo: JSON

  """
  An optional email address that represents the external user that this order was created for.
  This should only be set when creating an order for an external user that does not exist in our system.
  """
  ownerEmail: String

  """
  The proposed date to end the order.
  """
  proposedEndDate: Date

  """
  The proposed date to start the order.
  """
  proposedStartDate: Date

  """
  The requesting user's id. Defaults to the creator of the order if null or empty.
  """
  requesterUserId: ID

  """
  The source of the order
  """
  source: OrderSource!
}

input CreateNotificationInput {
  createdById: String
  createdByName: String
  isRead: Boolean! = false
  link: String
  message: String!
  secondaryText: [String!]
  userId: String!
}

type CreateNotificationResponse {
  count: Float
}

input CreateOrderDetailInput {
  advertiserLocationIds: [Int!]
  assigneeUserId: String
  budget: Float!
  hierarchyProductId: Int
  name: String!
  orderId: Int!
  productId: ID
  productInfo: JSONObject
  productKey: String
  status: OrderDetailStatusEnum
  targeting: JSONObject
}

input CreateOrderInput {
  advertiserId: Float!
  name: String!
  proposedEndDate: DateTime!
  proposedStartDate: DateTime!
}

input CreatePlatformAllocationInput {
  allocation: Float
  behavioralTargets: [String!]
  budget: Float
  contentTargets: [String!]
  demographicTargets: [String!]
  platform: String
}

input CreateProposalInput {
  adMixCampaigns: [CreateAdMixCampaignInput!]
  advertiserId: Float!
  budget: Float!
  end: DateTime!
  externalId: String
  goal: ProposalGoalType!
  industry: String!
  keywords: [String!]!
  locations: [String!] = []
  locationsObject: ProposalLocationsInput
  manualCustomCampaigns: [SaveManualVideoCampaignInput!]
  manualDisplayCampaigns: [SaveManualDisplayCampaignInput!]
  manualEmailCampaigns: [SaveManualEmailCampaignInput!]
  manualGeofencingCampaigns: [SaveManualGeofencingCampaignInput!]
  manualSEMCampaigns: [SaveManualSEMCampaignInput!]
  manualSEOCampaigns: [SaveManualSEOCampaignInput!]
  manualSocialMediaCampaigns: [SaveManualSocialMediaCampaignInput!]
  manualSpecializedCampaigns: [SaveManualSpecializedCampaignInput!]
  manualStreamingAudioCampaigns: [SaveManualStreamingAudioCampaignInput!]
  manualVideoCampaigns: [SaveManualVideoCampaignInput!]
  microIndustries: [String!]!
  name: String!
  start: DateTime!
  status: ProposalStatus!
  type: String!
  website: String!
}

"""
Input for `createProposedOrder`.
"""
input CreateProposedOrderInput {
  """
  The advertiser ID for which the order is being created for.
  """
  advertiserId: ID!

  """
  The user ID that is assigned to the order.
  """
  assigneeUserId: ID

  """
  The user ID that created the order. If null, attempts to fallback to the detected user making the request.
  """
  createdByUserId: ID

  """
  The associated line items to create.
  """
  lineItems: [LineItemInput!]

  """
  The name of the order.
  """
  name: String!

  """
  Custom information specific to the order.
  """
  orderInfo: JSON

  """
  An optional email address that represents the external user that this order was created for.
  This should only be set when creating an order for an external user that does not exist in our system.
  """
  ownerEmail: String

  """
  The proposed date to end the order.
  """
  proposedEndDate: Date

  """
  The proposed date to start the order.
  """
  proposedStartDate: Date

  """
  The requesting user's id. Defaults to the creator of the order if null or empty.
  """
  requesterUserId: ID

  """
  The source of the order
  """
  source: OrderSource!
}

input CreateRateCardInput {
  """
  The name of the rate card.
  """
  name: String!

  """
  Rates to create with the rate card.
  """
  rates: [CreateRateCardRateInput!]
}

"""
Used specifically when creating a rate card and attaching a rate to it immediately
"""
input CreateRateCardRateInput {
  """
  The billing type of the rate.
  """
  billingType: BillingType!

  """
  The description of the rate.
  """
  description: String

  """
  The flight minimum days amount required to spend for this rate.
  """
  flightMinimum: Float = 0

  """
  The monthly minimum budget required to spend for this rate.
  """
  monthlyBudgetMinimum: Float = 0

  """
  The monthly minimum impressions required to spend for this rate.
  """
  monthlyImpressionMinimum: Float = 0

  """
  The rate's retail amount.
  """
  retailAmount: Float!

  """
  The rate's wholesale amount.
  """
  wholesaleAmount: Float!
}

input CreateRateInput {
  """
  The billing type of the rate.
  """
  billingType: BillingType!

  """
  The description of the rate.
  """
  description: String

  """
  The flight minimum days amount required to spend for this rate.
  """
  flightMinimum: Float = 0

  """
  The monthly minimum budget required to spend for this rate.
  """
  monthlyBudgetMinimum: Float = 0

  """
  The monthly minimum impressions required to spend for this rate.
  """
  monthlyImpressionMinimum: Float = 0

  """
  The rate card id associated with the rate to create.
  """
  rateCardId: ID!

  """
  The rate's retail amount.
  """
  retailAmount: Float!

  """
  The rate's wholesale amount.
  """
  wholesaleAmount: Float!
}

input CreateRecommendedProposalInput {
  advertiserId: Float!
  budget: Float!
  end: DateTime!
  externalId: String
  goal: ProposalGoalType!
  id: Float
  industry: String!
  keywords: [String!]!
  locations: [String!] = []
  locationsObject: ProposalLocationsInput
  microIndustries: [String!]!
  name: String!
  recommendationCampaignType: RecommendationCampaignType!
  start: DateTime!
  status: ProposalStatus!
  type: String!
  website: String!
}

input CreateUserInput {
  data: UserDataInput
  email: String!
  firstName: String
  fullName: String!
  lastName: String
  middleName: String
  parentHierarchyIds: [String!]
  password: String
  username: String!
}

"""
Response type for `CreatedFile`.
Note that this is identical to `File` with the following differences
- `uploadUri` is added here since currently we only support uploading the file content when the file is initially created.
- `downloadUri` is excluded here since the downloadUri cannot be utilized until the file has been uploaded.
"""
type CreatedFile {
  """
  The date/time when the file contents will no longer be available
  """
  fileExpiryDate: DateTime

  """
  The extension of the file to store
  """
  fileExtension: String!

  """
  The name of the file to store
  """
  filename: String!
  id: ID!

  """
  The file status describing its availability for download
  """
  status: FileStatus!

  """
  The URI the file can be uploaded to
  `expiryTimeInSecs` is an optional argument that allows you to provide a custom expiration time
  for the resulting upload uri. If not provided the default expiry will be used.
  The maximum value for `expiryTimeInSecs` is 7 days, 604800 seconds. Values greater than this will be rejected!
  The minimum value must also be greater than 0.
  """
  uploadUri(expiryTimeInSecs: Int): SignedURI!
}

"""
A creative
"""
type Creative {
  """
  The contents belonging to the creative
  """
  contents: [CreativeContent!]!

  """
  The creative id in our system
  """
  id: ID!

  """
  The name of the creative
  """
  name: String!

  """
  The platform
  """
  platform: Platform!

  """
  The platformId
  """
  platformId: ID!

  """
  The type of the creative
  """
  type: CreativeType
}

"""
Representation of a Creative Content
"""
type CreativeContent {
  """
  The type of the creative content
  """
  contentType: CreativeContentType!

  """
  The creative id this content belongs to
  """
  creativeId: ID!

  """
  The creative content id in our system
  """
  id: ID!

  """
  The url of the creative content
  """
  url: String!
}

"""
Describes the type of creative content
"""
enum CreativeContentType {
  """
  Audio creative content
  """
  AUDIO

  """
  Embeddable video creative content
  """
  EMBEDDABLE_VIDEO

  """
  Image creative content
  """
  IMAGE

  """
  Thumbnail image creative content
  """
  THUMBNAIL_IMAGE

  """
  Unknown creative content
  """
  UNKNOWN

  """
  Video creative content
  """
  VIDEO
}

"""
Describes the type of creative
"""
enum CreativeType {
  """
  Audio creative
  """
  AUDIO

  """
  Image creative
  """
  IMAGE

  """
  Unknown creative
  """
  UNKNOWN

  """
  Video creative
  """
  VIDEO
}

"""
Describes an amount of currency.
"""
type Currency {
  """
  The amount for this currency.
  """
  amount: Float!

  """
  The three-letter ISO currency code representing the unit for this currency. Examples: "USD", "EUR".
  """
  currencyUnit: String!
}

type CurrencyDTO {
  amount: Float!
  currencyUnit: String!
}

type CursorPageInfo {
  endCursor: Int
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Int
}

input CursorPaginationInput {
  """
  Returns the elements in the list that come after the specified cursor.
  """
  after: Int

  """
  Returns the elements in the list that come before the specified cursor.
  """
  before: Int

  """
  Returns the first _n_ elements from the list.
  """
  first: Int

  """
  Returns the last _n_ elements from the list.
  """
  last: Int
}

"""
An RFC-3339 compliant Full Date Scalar
"""
scalar Date

"""
An input object for filtering by dates without times. Capable of filtering by a start date, end date, or a combination
of both.
"""
input DateFilter {
  """
  The inclusive ending date. Results with a date after this will be excluded.

  Example given `end: "2023-05-01"`:

  ```
  2023-04-28 |
  2023-04-29 |
  2023-04-30 |-- included
  2023-05-01 ]
  2023-05-02
  ```
  """
  end: Date

  """
  The inclusive starting date. Results with a date before this will be excluded.

  Example given `start: "2023-04-30"`:

  ```
  2023-04-28
  2023-04-29 ]
  2023-04-30 |-- included
  2023-05-01 |
  2023-05-02 |
  ```
  """
  start: Date
}

input DateFilterCondition {
  """
  Filter by a specific operation. I.E. are we looking for dates less than or greater than the value provided?
  Example: GTE
  """
  operator: DateFilterOperator!

  """
  Filter by the provided date/time value
  """
  value: DateTime!
}

enum DateFilterOperator {
  GTE
  LTE
}

"""
An RFC-3339 compliant DateTime Scalar
"""
scalar DateTime

"""
An input object for filtering by dates with times. Capable of filtering by a start date time, end date time, or a combination
of both.
"""
input DateTimeFilter {
  """
  The inclusive ending date time. Results with a date or time after this will be excluded.

  Example given `end: "2023-04-30 19:00:00"`:
  ```
  2023-04-30 16:00:00 |
  2023-04-30 17:00:00 |
  2023-04-30 18:00:00 |-- included
  2023-04-30 19:00:00 ]
  2023-04-30 20:00:00
  ```
  """
  end: DateTime

  """
  The inclusive starting date time. Results with a date or time before this will be excluded.

  Example given `start: "2023-04-30 17:00:00"`:
  ```
  2023-04-30 16:00:00
  2023-04-30 17:00:00 ]
  2023-04-30 18:00:00 |-- included
  2023-04-30 19:00:00 |
  2023-04-30 20:00:00 |
  ```
  """
  start: DateTime
}

enum DayOfWeekEnum {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

"""
Response type for `mutation deleteAllocation`.
"""
type DeleteAllocationResponse {
  """
  If an allocation was actually deleted.
  """
  deleted: Boolean!

  """
  The line item that had the allocation deleted.
  """
  lineItem: LineItem!
}

type DeleteAndCreateOrderDetailType {
  deleteOrderDetailId: Float!
  newOrderDetail: OrderDetailType!
}

"""
Input for `deleteLinkedAdvertiser` mutation.
"""
input DeleteLinkedAdvertiserInput {
  """
  The internal ID of the Advertiser.
  """
  advertiserId: Int!

  """
  The Platform the Advertiser is linked to.
  """
  platform: Platform!

  """
  The Platform Advertiser ID the Advertiser is linked to.
  """
  platformAdvertiserId: String!
}

type DemographicTTDTarget {
  type: String!
  values: [TargetValues!]!
}

type DetailedRecencyResponse {
  interval: AnalyticsInterval!
  value: DetailedRecencyValue!
}

type DetailedRecencyValue {
  clicks: Float!
  conversions: Float!
  conversionsByTrackingLabel: [RecencyConversionValue!]
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  recencyGroup: RecencyGroup
}

type DisabledHierarchyProducts {
  disabled: HierarchyProduct!
  disabledDescendantIds: [ID!]!
}

type DisplayAdGroupPerformanceMetric {
  interval: AnalyticsInterval!
  value: DisplayAdGroupPerformanceValue!
}

type DisplayAdGroupPerformanceMetricsResponse {
  metrics: [DisplayAdGroupPerformanceMetric!]!
}

type DisplayAdGroupPerformanceSummaryResponse {
  metrics: [DisplayAdGroupPerformanceMetric!]!
  popMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): DisplayPopMetrics
}

type DisplayAdGroupPerformanceValue implements BaseAdGroupPerformanceValue & BaseDisplayPerformanceValue {
  adGroupId: String!
  adGroupName: String!
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
}

type DisplayAdvertiserPerformanceMetric {
  interval: AnalyticsInterval!
  value: DisplayAdvertiserPerformanceValue!
}

type DisplayAdvertiserPerformanceMetricsResponse {
  metrics: [DisplayAdvertiserPerformanceMetric!]!
}

type DisplayAdvertiserPerformanceSummaryResponse {
  metrics: [DisplayAdvertiserPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): DisplayPopMetrics
}

type DisplayAdvertiserPerformanceValue implements BaseDisplayPerformanceValue {
  advertiserId: String!
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
}

type DisplayBrandMetricsResponse {
  interval: AnalyticsInterval!
  value: DisplayBrandValue!
}

type DisplayBrandValue implements BaseBrandValue {
  brand: Brand
  brandId: String
  clicks: Float!
  ctr: Float!
  impressions: Float!
}

type DisplayCampaignPerformanceMetric {
  interval: AnalyticsInterval!
  value: DisplayCampaignPerformanceValue!
}

type DisplayCampaignPerformanceMetricsResponse {
  metrics: [DisplayCampaignPerformanceMetric!]!
}

type DisplayCampaignPerformanceSummaryResponse {
  metrics: [DisplayCampaignPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): DisplayPopMetrics
}

type DisplayCampaignPerformanceValue implements BaseCampaignPerformanceValue & BaseDisplayPerformanceValue {
  campaignId: String!
  campaignName: String
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
}

type DisplayConversionValue implements BaseConversionValue {
  conversions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  trackingLabelName: String
  trackingLabelSequence: Float!
}

type DisplayConversionsResponse {
  interval: AnalyticsInterval!
  value: DisplayConversionValue!
}

type DisplayCreativeMetricsResponse {
  interval: AnalyticsInterval!
  value: DisplayCreativeValue!
}

type DisplayCreativeValue implements BaseTtdCreativeValue {
  clicks: Float!
  conversions: Float!
  creative: Creative!
  creativeId: String!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
}

type DisplayDeviceTypeMetricsResponse {
  interval: AnalyticsInterval!
  value: DisplayDeviceTypeValue!
}

type DisplayDeviceTypeValue implements BaseDeviceTypeValue {
  clicks: Float!
  ctr: Float!
  deviceType: TtdDeviceTypeEnum!
  impressions: Float!
}

type DisplayGeoMetricsResponse {
  interval: AnalyticsInterval!
  value: DisplayGeoValue!
}

type DisplayGeoValue implements BaseGeoValue {
  boundary: MapboxBoundary
  city: String
  clicks: Float!
  conversions: Float!
  coordinates: LatLongType
  country: String!
  impressions: Float!
  location: String!
  region: String!
  zip: String
}

type DisplayPopMetrics implements BaseDisplayPerformanceValue {
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
}

type DisplayTimeOfDayMetricsResponse implements BaseTimeOfDayResponse {
  interval: TimeOfDayInterval!
  value: DisplayTimeOfDayValue!
}

type DisplayTimeOfDayValue implements BaseTimeOfDayValue {
  clicks: Float!
  ctr: Float!
  impressions: Float!
}

"""
Federated Dma entity
"""
type Dma {
  boundaries: [MapboxBoundary!]!
  dma: String!
  dmaBoundaries: [DmaCounty!]!
  dmaIndex: Float!
  id: String!
}

type DmaCounty {
  county: String!
  featureId: String!
  state: String!
}

type DmaResponse implements PaginatedResponse {
  pageNumber: Int!
  pageSize: Int!
  results: [Dma!]!
  totalCount: Int
  totalPages: Int
}

type EmailTarget {
  type: String!
  values: [String!]!
}

"""
Possible types for email targeting
"""
enum EmailTypeEnum {
  CONSUMER_INTEREST
  CONSUMER_LIFESTYLE
  DEMOGRAPHIC
}

type EnabledHierarchyProducts {
  enabled: HierarchyProduct!
  enabledDescendantIds: [ID!]!
}

"""
Describes a request for adgroup-level engagement metrics.
Note that analytics product type is not currently included, this is because for now only SOCIAL is supported
"""
input EngagementMetricsByAdGroupInput {
  """
  The adgroup to filter results by.
  """
  adGroupId: ID

  """
  The advertiser to filter results by.
  """
  advertiserId: ID!

  """
  The campaign to filter results by.
  """
  campaignId: ID

  """
  The inclusive end date to fetch metrics from.
  """
  endDate: Date!

  """
  The resolution to group metrics by. If not provided the result will be the total/average over the entire date range.
  """
  resolution: IntervalResolution

  """
  The inclusive start date to fetch metrics from.
  """
  startDate: Date!
}

"""
Summarizes engagement metrics for an advertiser/campaign/ad group.
"""
type EngagementSummary {
  """
  The value for common engagement metrics, like engagements, likes, or shares.
  """
  metric: CommonEngagementMetric!

  """
  Compares engagement between the current period and the previous period of the same duration.
  """
  pop: PeriodOverPeriodEngagementMetric!
}

"""
Describes a request for a summary of engagement metrics.
"""
input EngagementSummaryInput {
  """
  The adgroup to filter results by.
  """
  adGroupId: ID

  """
  The advertiser to filter results by.
  """
  advertiserId: ID!

  """
  Filter results by how ad content is presented to users.
  """
  analyticsProductType: AnalyticsProductTypeIdentifier!

  """
  The campaign to filter results by.
  """
  campaignId: ID

  """
  The inclusive end date to fetch metrics from.
  """
  endDate: Date!

  """
  The inclusive start date to fetch metrics from.
  """
  startDate: Date!
}

"""
Possible error codes
"""
enum ErrorCodes {
  FORBIDDEN
  UNAUTHENTICATED
}

type ExternalAdGroup {
  id: ID!
  name: String!
  platform: Platform!
  platformAdGroupId: String!
  platformAdvertiserId: String
  platformCampaignId: String
}

"""
Paginated External Ad Groups.
"""
type ExternalAdGroups {
  pageNumber: Int!
  pageSize: Int!
  results: [ExternalAdGroup!]!
  totalCount: Int!
  totalPages: Int!
}

type ExternalAdvertiser {
  """
  Describes hierarchies and related metadata to associate with the external advertiser.
  """
  hierarchies: [ExternalAdvertiserHierarchy!]!

  """
  The hierarchy id's associated with the ext advertiser
  """
  hierarchyIds: [ID!]!
  id: ID!
  name: String!
  platform: Platform!
  platformAdvertiserId: String!
}

"""
Describes a hierarchy and related metadata to associate with the external advertiser.
"""
type ExternalAdvertiserHierarchy {
  """
  The hierarchy associated with the external advertiser.
  """
  hierarchy: Hierarchy!

  """
  The hierarchy id associated with the external advertiser.
  """
  hierarchyId: ID!

  """
  The Improvado account associated with this hierarchy id and external advertiser, if one exists.
  """
  improvadoAccountId: ID
}

"""
Describes a hierarchy and related metadata to associate with the external advertiser.
"""
input ExternalAdvertiserHierarchyInput {
  """
  The hierarchy id to associate with the external advertiser.
  """
  hierarchyId: ID!

  """
  The Improvado account to associate with this hierarchy id and external advertiser, if one exists.
  """
  improvadoAccountId: ID
}

"""
Paginated External Advertisers.
"""
type ExternalAdvertisers {
  pageNumber: Int!
  pageSize: Int!
  results: [ExternalAdvertiser!]!
  totalCount: Int!
  totalPages: Int!
}

type ExternalCampaign {
  id: ID!
  name: String!
  platform: Platform!
  platformAdvertiserId: String
  platformCampaignId: String!
}

"""
Data for a campaign that is not linked to an advertiser
"""
type ExternalCampaignResponse {
  """
  The ID of the campaign on the external platform.
  """
  externalCampaignId: String

  """
  A human readable name for the campaign.
  """
  name: String

  """
  The platform where the campaign is hosted.
  """
  platform: Platform!
}

"""
Paginated External Campaigns.
"""
type ExternalCampaigns {
  pageNumber: Int!
  pageSize: Int!
  results: [ExternalCampaign!]!
  totalCount: Int!
  totalPages: Int!
}

type FacebookAdGroupAudience {
  audienceTargetingJson: String
  platformAdGroupId: String!
  platformAdGroupName: String!
}

"""
Paginated Facebook Ad Group Audiences.
"""
type FacebookAdGroupAudiences {
  pageNumber: Int!
  pageSize: Int!
  results: [FacebookAdGroupAudience!]!
  totalCount: Int!
  totalPages: Int!
}

type FacebookAdGroupPerformanceMetric {
  interval: AnalyticsInterval!
  value: FacebookAdGroupPerformanceValue!
}

type FacebookAdGroupPerformanceMetricsResponse {
  metrics: [FacebookAdGroupPerformanceMetric!]!
}

type FacebookAdGroupPerformanceSummaryResponse {
  metrics: [FacebookAdGroupPerformanceMetric!]!
  popMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): FacebookPopMetrics
}

type FacebookAdGroupPerformanceValue implements BaseAdGroupPerformanceValue & BaseFacebookPerformanceValue {
  adGroupId: String!
  adGroupName: String!
  clicks: Float!
  comments: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  engagements: Float!
  impressions: Float!
  likes: Float!
  shares: Float!
  spend: CurrencyDTO
  viewRate: Float!
  views: Float!
}

type FacebookAdvertiserPerformanceMetric {
  interval: AnalyticsInterval!
  value: FacebookAdvertiserPerformanceValue!
}

type FacebookAdvertiserPerformanceMetricsResponse {
  metrics: [FacebookAdvertiserPerformanceMetric!]!
}

type FacebookAdvertiserPerformanceSummaryResponse {
  metrics: [FacebookAdvertiserPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): FacebookPopMetrics
}

type FacebookAdvertiserPerformanceValue implements BaseFacebookPerformanceValue {
  advertiserId: String!
  clicks: Float!
  comments: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  engagements: Float!
  impressions: Float!
  likes: Float!
  shares: Float!
  spend: CurrencyDTO
  viewRate: Float!
  views: Float!
}

type FacebookAudienceValue {
  adGroupId: String!
  value: String!
}

type FacebookCampaignPerformanceMetric {
  interval: AnalyticsInterval!
  value: FacebookCampaignPerformanceValue!
}

type FacebookCampaignPerformanceMetricsResponse {
  metrics: [FacebookCampaignPerformanceMetric!]!
}

type FacebookCampaignPerformanceSummaryResponse {
  metrics: [FacebookCampaignPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): FacebookPopMetrics
}

type FacebookCampaignPerformanceValue implements BaseCampaignPerformanceValue & BaseFacebookPerformanceValue {
  campaignId: String!
  campaignName: String
  clicks: Float!
  comments: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  engagements: Float!
  impressions: Float!
  likes: Float!
  shares: Float!
  spend: CurrencyDTO
  viewRate: Float!
  views: Float!
}

type FacebookCreativeMetricsResponse {
  interval: AnalyticsInterval!
  value: FacebookCreativeValue!
}

type FacebookCreativeValue implements BaseMetaCreativeValue {
  adName: String!
  clicks: Float!
  comments: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  creative: Creative!
  creativeId: String!
  ctr: Float!
  engagements: Float!
  impressions: Float!
  likes: Float!
  reactions: Float!
  shares: Float!
  spend: CurrencyDTO
  viewRate: Float!
  views: Float!
}

type FacebookGeoMetricsResponse {
  interval: AnalyticsInterval!
  value: FacebookGeoValue!
}

type FacebookGeoValue {
  boundary: Dma
  clicks: Float!
  ctr: Float!
  dma: GeoDmaValue
  impressions: Float!
  location: String!
}

"""
A Facebook performance by publisher metric.
"""
type FacebookPerformanceByPublisherMetric {
  """
  The total number of clicks.
  """
  clicks: Int!

  """
  The conversion rate (conversions / clicks).
  """
  conversionRate: Float!

  """
  The total number of conversions.
  """
  conversions: Float!

  """
  The click through rate (clicks / impressions).
  """
  ctr: Float!

  """
  The total number of impressions.
  """
  impressions: Int!
}

"""
The interval and publisher of a Facebook performance by publisher metric.
"""
type FacebookPerformanceByPublisherMetricInterval {
  """
  The date interval to which this metric applies.
  """
  interval: Interval!

  """
  The Facebook performance metrics for the publisher: clicks, impressions, conversions, ect.
  """
  metric: FacebookPerformanceByPublisherMetric!

  """
  The publisher of the interval metric.
  """
  publisher: String!
}

"""
Input for facebookPerformanceByPublisher.
"""
input FacebookPerformanceMetricsByPublisherInput {
  """
  The adgroup to filter results by.
  """
  adGroupId: ID

  """
  The advertiser to filter results by.
  """
  advertiserId: ID!

  """
  The campaign to filter results by.
  """
  campaignId: ID

  """
  The inclusive end date to fetch metrics from.
  """
  endDate: Date!

  """
  The resolution to group metrics by.
  If not provided the result will be the total/average over the entire date range.
  """
  resolution: IntervalResolution

  """
  The inclusive start date to fetch metrics from.
  """
  startDate: Date!
}

type FacebookPopMetrics {
  clicks: Float!
  comments: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: Float!
  costPerConversion: Float!
  ctr: Float!
  engagements: Float!
  impressions: Float!
  likes: Float!
  shares: Float!
  spend: Float!
  viewRate: Float!
  views: Float!
}

type FbTarget {
  type: String!
  values: [String!]!
}

"""
A downloadable `File`.
"""
type File {
  """
  The URI the file can be downloaded from.

  `expiryTimeInSecs` is an optional argument that allows you to provide a custom expiration time
  for the resulting download uri. If not provided the default expiry will be used.

  - The maximum value for `expiryTimeInSecs` is 7 days, `604800` seconds. Values greater than this will be rejected!
  - The minimum value must also be greater than `0`.
  """
  downloadUri(expiryTimeInSecs: Int): SignedURI!

  """
  The date/time when the file contents will no longer be available.
  """
  fileExpiryDate: DateTime
  fileExpiryEpochSeconds: Float

  """
  The extension of the file.
  """
  fileExtension: String!
  fileId: Float @deprecated(reason: "Use `id` instead.")

  """
  The name of the file.
  """
  filename: String!
  httpSignedDownloadUri: String @deprecated(reason: "Use `downloadUri { uri }` instead.")
  id: ID!

  """
  The file status describing its availability for download.
  """
  status: FileStatus!
}

"""
Describes the status of the file
"""
enum FileStatus {
  """
  The file is available for download
  """
  AVAILABLE

  """
  The file is pending upload or is currently processing (virus scanning)
  """
  PROCESSING

  """
  The file has been quarantined and cannot be downloaded
  """
  QUARANTINED

  """
  The file is unavailable, either it was never uploaded or it never was processed correctly and we stopped checking availability.
  This is a terminal state.
  """
  UNAVAILABLE
}

type FileUpload {
  fileExpiryEpochSeconds: Float
  fileExtension: String!
  fileId: Float!
  filename: String!
  httpSignedUploadUri: String!
}

"""
Ways in which the `files` query results can be filtered.
"""
input FilesFilterInput {
  """
  Select files with the specified ids.
  """
  ids: [ID!]!
}

"""
Response type for `query files`.
"""
type FilesResponse {
  """
  The page information.
  """
  pageInfo: PageInfo!

  """
  The page of results.
  """
  results: [File!]!
}

enum FoldEnum {
  ABOVE
  BELOW
  UNKNOWN
}

type FoldResponse {
  interval: AnalyticsInterval!
  value: FoldValue!
}

type FoldValue {
  clicks: Float!
  conversions: Float!
  ctr: Float!
  fold: FoldEnum!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  viewCompletionRate: Float!
  viewsCompleted: Float!
  viewsStarted: Float!
}

enum ForecastGeoTypeEnum {
  CITY
  COUNTRY
  COUNTY
  DMA
  POSTAL_CODE
  REGION
  UNKNOWN
}

type ForecastResponse {
  availableBudget: Float
  devices: Range
  impressions: Range
}

input ForgotPasswordInput {
  email: String
}

type FrequencyResponse {
  interval: AnalyticsInterval!
  value: FrequencyValue!
}

type FrequencyValue {
  frequencyPerPerson: Float!
  uniquePersons: Float!
}

type GdnAdGroupPerformanceMetric {
  interval: AnalyticsInterval!
  value: GdnAdGroupPerformanceValue!
}

type GdnAdGroupPerformanceMetricsResponse {
  metrics: [GdnAdGroupPerformanceMetric!]!
}

type GdnAdGroupPerformanceSummaryResponse {
  metrics: [GdnAdGroupPerformanceMetric!]!
  popMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): GdnPopMetrics
}

type GdnAdGroupPerformanceValue implements BaseAdGroupPerformanceValue & BaseGdnPerformanceValue {
  adGroupId: String!
  adGroupName: String!
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
}

type GdnAdvertiserPerformanceMetric {
  interval: AnalyticsInterval!
  value: GdnAdvertiserPerformanceValue!
}

type GdnAdvertiserPerformanceMetricsResponse {
  metrics: [GdnAdvertiserPerformanceMetric!]!
}

type GdnAdvertiserPerformanceSummaryResponse {
  metrics: [GdnAdvertiserPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): GdnPopMetrics
}

type GdnAdvertiserPerformanceValue implements BaseGdnPerformanceValue {
  advertiserId: String!
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
}

type GdnCampaignPerformanceMetric {
  interval: AnalyticsInterval!
  value: GdnCampaignPerformanceValue!
}

type GdnCampaignPerformanceMetricsResponse {
  metrics: [GdnCampaignPerformanceMetric!]!
}

type GdnCampaignPerformanceSummaryResponse {
  metrics: [GdnCampaignPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): GdnPopMetrics
}

type GdnCampaignPerformanceValue implements BaseCampaignPerformanceValue & BaseGdnPerformanceValue {
  campaignId: String!
  campaignName: String
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
}

type GdnCreativeMetricsResponse {
  interval: AnalyticsInterval!
  value: GdnCreativeValue!
}

type GdnCreativeValue implements BaseGoogleCreativeValue {
  adName: String!
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  creative: Creative!
  creativeId: String!
  ctr: Float!
  impressions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

type GdnFbTarget {
  type: String!
  values: [String!]!
}

type GdnGeoMetricsResponse {
  interval: AnalyticsInterval!
  value: GdnGeoValue!
}

type GdnGeoValue implements BaseGeoValue {
  boundary: MapboxBoundary
  city: String
  clicks: Float!
  conversions: Float!
  coordinates: LatLongType
  country: String!
  impressions: Float!
  location: String!
  region: String!
  zip: String
}

type GdnPopMetrics {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
}

type GdnTarget {
  type: String!
  values: [String!]!
}

input GeoData {
  country: String!
  search: [String!]!
  type: ForecastGeoTypeEnum!
}

type GeoDmaValue {
  name: String
  normalizedName: String
}

"""
Contains multiple types of geo locations.
"""
type GeoLocations {
  """
  Federated feature entities
  """
  boundaries: [MapboxBoundary!]!

  """
  Internal DMA UUIDs
  """
  dmaNames: [String!]!

  """
  Federated DMA entities
  """
  dmas: [Dma!]!

  """
  Mapbox feature IDs
  """
  featureIds: [String!]!

  """
  Misc places such as cities
  """
  places: [String!]!

  """
  Zip codes
  """
  zipcodes: [String!]!
}

"""
Input for geoLocations on UpdateLineItem
"""
input GeoLocationsInput {
  """
  DMA values such as `"ALBUQUERQUE (NM) - SANTA FE (NM) - DMA"`
  """
  dmaNames: [String!]

  """
  Mapbox feature IDs
  """
  featureIds: [String!]

  """
  Misc places such as cities
  """
  places: [String!]

  """
  Zip codes
  """
  zipcodes: [String!]
}

"""
An geo metric with common metrics pertaining to a location
"""
type GeoMetric {
  """
  The interval.
  """
  interval: Interval!

  """
  The location.
  """
  location: AnalyticsLocation!

  """
  The location type
  """
  locationType: AnalyticsLocationTypeIdentifier!

  """
  The common geo metric.
  """
  metric: CommonGeoMetric!
}

"""
Describes a request for geo metrics.
"""
input GeoMetricsInput {
  """
  The adgroup to filter results by.
  """
  adGroupId: ID

  """
  The advertiser to filter results by.
  """
  advertiserId: ID!

  """
  Filter results by a specific product type
  """
  analyticsProductType: AnalyticsProductTypeIdentifier!

  """
  The campaign to filter results by.
  """
  campaignId: ID

  """
  The inclusive end date to fetch metrics from.
  """
  endDate: Date!

  """
  Filter results by a specific location type (i.e., geo granularity)
  """
  locationType: AnalyticsLocationTypeIdentifier!

  """
  The inclusive start date to fetch metrics from.
  """
  startDate: Date!
}

type GeoTargeting {
  description: String
  fileId: ID!
}

"""
Input for `file` Query.
"""
input GetFileInput {
  """
  The id of the file to retrieve.
  """
  id: ID!
}

type GoogleAdsAdGroupDTO implements BaseGoogleAdsDTO {
  popMetrics(
    adGroupId: String!
    advertiserId: String!
    campaignId: String!
    endDate: Date!
    startDate: Date!
  ): GoogleAdsPopMetrics!
  searchImpressionShare: Float!
}

type GoogleAdsAdvertiserDTO implements BaseGoogleAdsDTO {
  popMetrics(advertiserId: String!, endDate: Date!, startDate: Date!): GoogleAdsPopMetrics!
  searchImpressionShare: Float!
}

type GoogleAdsCampaignDTO implements BaseGoogleAdsDTO {
  popMetrics(
    advertiserId: String!
    campaignId: String!
    endDate: Date!
    startDate: Date!
  ): GoogleAdsPopMetrics!
  searchImpressionShare: Float!
}

type GoogleAdsPopMetrics implements BaseGoogleAdsDTO {
  searchImpressionShare: Float!
}

type GoogleAudienceResponse {
  interval: AnalyticsInterval!
  value: GoogleAudienceValue!
}

type GoogleAudienceValue {
  audience: String!
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

enum GoogleDeviceTypeEnum {
  CONNECTED_TV
  DESKTOP
  MOBILE
  OTHER
  TABLET
}

type GoogleDeviceTypeMetricsResponse {
  interval: AnalyticsInterval!
  value: GoogleDeviceTypeValue!
}

type GoogleDeviceTypeValue implements BaseGoogleDeviceTypeValue {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  ctr: Float!
  deviceType: GoogleDeviceTypeEnum!
  impressions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

type GoogleTimeOfDayMetricsResponse {
  interval: TimeOfDayInterval!
  value: GoogleTimeOfDayValue!
}

type GoogleTimeOfDayValue {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
}

enum GrantType {
  APPLICATION
  HIERARCHY
}

type GrantsResponse {
  entityId: String
  grantType: GrantType!
  hierarchyId: String
  hierarchyType: String
  permissions: [String!]!
}

type Hierarchies {
  hierarchies: [Hierarchy!]!
  parentId: Float
}

type HierarchiesByEntityIds {
  faEntityId: String!
  hierarchyId: String!
}

input HierarchiesByEntityIdsInput {
  faEntityIds: [String!]!
}

type HierarchiesByEntityIdsResponse {
  results: [HierarchiesByEntityIds!]!
}

input HierarchiesInput {
  hierarchyId: String!
  hierarchyType: HierarchyType!
  permissions: [String!]
}

"""
A hierarchy.
"""
type Hierarchy {
  assignee: User
  childAdvertiserIds: [Int!]
  childHierarchyIds: [Int!]
  created: DateTime!
  createdBy: User
  createdUserId: String

  """
  The hierarchy id.
  """
  guid: ID!
  id: Float!
  logoFile: File
  logoUri: String
    @deprecated(reason: "Use logoFile, which is federated and resolved through the subGraph")
  mongoId: String
  name: String!
  ownerId: String
  parent: Hierarchy
  parentId: Float
  productRates(effectiveDate: DateTime!, productTypes: [ProductTypeEnum!]!): [ProductRateResponse!]!
  shortName: String
  styleLogo: String
  updated: DateTime!
}

type HierarchyChildIdsResponse {
  advertiserId: Float
  advertiserMongoId: String
  childAdvertiserIds: [Float!]!
  childAdvertiserMongoIds: [String!]!
  childHierarchyIds: [Float!]!
  childHierarchyMongoIds: [String!]!
  id: Float
  mongoId: String
}

type HierarchyParentIdsResponse {
  advertiserId: Float
  advertiserMongoId: String
  id: Float
  mongoId: String
  parentHierarchyIds: [Float!]!
  parentHierarchyMongoIds: [String!]!
}

"""
Federated `HierarchyProduct` entity.
"""
type HierarchyProduct {
  """
  The active Rate Card.
  If the Product has custom rates configured, then `rateCard == activeRateCard`.
  Else, equal to `rateCard` of the nearest Hierarchy Product ancestor with a _non-null_ `rateCard`.
  """
  activeRateCard: RateCard!

  """
  The ID of the active Rate Card.
  If the Product has custom rates configured, then `rateCardId == activeRateCardId`.
  Else, equal to `rateCardId` of the nearest Hierarchy Product ancestor with a _non-null_ `rateCardId`.
  """
  activeRateCardId: ID!

  """
  The date this Hierarchy Product was created.
  """
  created: DateTime!

  """
  A user defined name for the Product within the Hierarchy.
  """
  customName: String

  """
  The name of this Product for use within the Hierarchy. Equal to `customName` when defined, else `product { name }`.
  """
  displayName: String!

  """
  Any IDs in this list have this product specifically enabled for them.
  Stopgap measure until we can make advertisers first class hierarchy entries.
  """
  enabledAdvertiserIds: [ID!]!

  """
  Any advertisers in this list have the product specifically enabled for them.
  Resolved via federation.
  """
  enabledAdvertisers: [Advertiser]!

  """
  Controls if this hierarchy product is enabled for all of its advertiser children.
  Stopgap measure until we can make advertisers first class hierarchy entries.
  """
  enabledForAllAdvertisers: Boolean!

  """
  The AllocationGoalTypes configured for the Product within the hierarchy.
  """
  goalTypes: [AllocationGoalType!]

  """
  The ID of the Hierarchy.
  """
  hierarchyId: ID!
  id: ID!

  """
  The Product associated with the Hierarchy.
  """
  product: ProductResponse!

  """
  The ID of the Product associated with the Hierarchy.
  """
  productId: ID!

  """
  The configured Rate Card. Descendant Hierarchy Products will inherit rates from this Rate Card.
  """
  rateCard: RateCard

  """
  The ID of the configured Rate Card. Descendant Hierarchy Products will inherit rates from the Rate Card with this ID.
  """
  rateCardId: ID

  """
  The status of the Product within the Hierarchy.
  """
  status: HierarchyProductStatus

  """
  The date the Hierarchy Product was last updated.
  """
  updated: DateTime!
}

"""
How a product is configured within a hierarchy.
Inheritable fields are resolved by traversing parent hierarchy product configurations until the first non-null value is found.
"""
type HierarchyProductConfig {
  """
  The customized name to display instead of the product name (inheritable).
  """
  customName: String

  """
  The name to display to end users. Equal to `customName ?? productName`.
  """
  displayName: String!

  """
  Any IDs in this list have this product specifically enabled for them (inheritable).
  """
  enabledAdvertiserIds: [ID!]!

  """
  The specific advertisers this product should be enabled for (inheritable).
  """
  enabledAdvertisers: [Advertiser!]!

  """
  Controls if the product is enabled for all advertisers that are a child of the hierarchy (inheritable).
  """
  enabledForAllAdvertisers: Boolean!

  """
  The goal types configured for the product within the hierarchy (inheritable).
  """
  goalTypes: [AllocationGoalType!]!

  """
  The hierarchy being configured.
  """
  hierarchy: Hierarchy!

  """
  The ID of the hierarchy being configured.
  """
  hierarchyId: ID!

  """
  Additional metadata describing how inheritable fields were resolved.
  """
  metadata: HierarchyProductConfigMetadata!

  """
  The product being configured.
  """
  product: ProductResponse!

  """
  The ID of the product being configured.
  """
  productId: ID!

  """
  The configured rate card (inheritable).
  """
  rateCard: RateCard!

  """
  The ID of the configured rate card (inheritable).
  """
  rateCardId: ID!

  """
  The status of this product within the hierarchy (inheritable).
  """
  status: HierarchyProductStatus!
}

"""
Metadata describing how a specific inheritable `HierarchyProductConfig` field was resolved.
"""
type HierarchyProductConfigFieldMetadata {
  """
  If true, the value of this field was resolved from the `HierarchyProductConfig` for `sourceHierarchyId`
  """
  isInherited: Boolean!

  """
  The hierarchy where the field value was resolved.
  """
  sourceHierarchy: Hierarchy!

  """
  The ID of the hierarchy where the field value was resolved.
  """
  sourceHierarchyId: ID!
}

"""
Metadata describing how inheritable `HierarchyProductConfig` fields were resolved.
"""
type HierarchyProductConfigMetadata {
  """
  How `customName` was resolved.
  """
  customName: HierarchyProductConfigFieldMetadata!

  """
  How `enabledAdvertiserIds` was resolved.
  """
  enabledAdvertiserIds: HierarchyProductConfigFieldMetadata!

  """
  How `enabledForAllAdvertisers` was resolved.
  """
  enabledForAllAdvertisers: HierarchyProductConfigFieldMetadata!

  """
  How `goalTypes` was resolved.
  """
  goalTypes: HierarchyProductConfigFieldMetadata!

  """
  How `rateCardId` was resolved.
  """
  rateCardId: HierarchyProductConfigFieldMetadata!

  """
  How `status` was resolved.
  """
  status: HierarchyProductConfigFieldMetadata!
}

"""
Fields that a `HierarchyProductConfig` can be sorted by.
"""
enum HierarchyProductConfigSortableField {
  """
  Sort by `displayName`.
  """
  DISPLAY_NAME

  """
  Sort by `product { name }`.
  """
  PRODUCT_NAME
}

"""
Ways in which `HierarchyProductConfig` query results can be filtered.
"""
input HierarchyProductConfigsFilterInput {
  """
  Select hierarchy product configs where the product has any of the specified classes.
  """
  advertisingProductClasses: [String!]

  """
  Select hierarchy product configs where the product has any of the specified lines.
  """
  advertisingProductLines: [String!]

  """
  Select hierarchy product configs where the product has any of the specified lines.
  """
  advertisingProductTypes: [String!]

  """
  Select hierarchy product configs for the specified hierarchy.
  """
  hierarchyId: ID!

  """
  Select hierarchy product configs for the specified products.
  """
  productIds: [ID!]

  """
  Filter hierarchy product configs with query on `product.name` or `customName`.
  """
  query: String

  """
  Select hierarchy product configs with the specified status.
  """
  status: HierarchyProductStatus
}

"""
Response type for `query hierarchyProductConfigs`.
"""
type HierarchyProductConfigsResponse {
  """
  Information about the page.
  """
  pageInfo: PageInfo!

  """
  The page of results.
  """
  results: [HierarchyProductConfig!]!
}

"""
How to sort `HierarchyProductConfig` query results.
"""
input HierarchyProductConfigsSortInput {
  """
  The direction of the sorting.
  """
  direction: SortDirection = ASC

  """
  The field by which results are sorted.
  """
  field: HierarchyProductConfigSortableField = PRODUCT_NAME
}

"""
How a Product is listed for sale within a specific Hierarchy.
"""
type HierarchyProductListing {
  """
  The goal types of the product within the hierarchy.
  """
  goalTypes: [AllocationGoalType!]!

  """
  The ID of the hierarchy the product is listed for.
  """
  hierarchyId: ID!

  """
  The name to display to end users.
  The original product name is located at `product.name`.
  """
  name: String!

  """
  The product.
  """
  product: ProductResponse!

  """
  The ID of the product.
  """
  productId: ID!

  """
  The rates of the product within the hierarchy.
  """
  rateCard: RateCard!

  """
  The ID of the rate card.
  """
  rateCardId: ID!

  """
  The status of the product within the hierarchy.
  """
  status: HierarchyProductStatus!
}

"""
Filter input for `hierarchyProductListings` query.
"""
input HierarchyProductListingsFilterInput {
  """
  Select product listings where the product has any of the specified classes.
  """
  advertisingProductClasses: [String!]

  """
  Select product listings where the product has any of the specified lines.
  """
  advertisingProductLines: [String!]

  """
  Select product listings where the product has any of the specified lines.
  """
  advertisingProductTypes: [String!]

  """
  Select product listings for the specified hierarchy ID.
  """
  hierarchyId: ID!

  """
  Select product listings for the specified products.
  """
  productIds: [ID!]

  """
  Filter product listings that match the query string.
  """
  query: String

  """
  Select product listings with the specified status.
  """
  status: HierarchyProductStatus
}

"""
Response type for `hierarchyProductListings` query.
"""
type HierarchyProductListingsResponse {
  """
  Information about the page.
  """
  pageInfo: PageInfo!

  """
  The page of results.
  """
  results: [HierarchyProductListing!]!
}

"""
Sort input for `hierarchyProductListings` query.
"""
input HierarchyProductListingsSortInput {
  """
  The direction of the sorting.
  """
  direction: SortDirection = ASC

  """
  The field by which results are sorted.
  """
  field: ProductListingSortableField = NAME
}

type HierarchyProductPageResponse {
  pageNumber: Int!
  pageSize: Int!
  results: [HierarchyProduct!]!
  totalCount: Int!
  totalPages: Int!
}

type HierarchyProductRateResponse {
  """
  The billing type of the rate.
  """
  billingType: BillingType!

  """
  The date that this rate was created.
  """
  created: DateTime!

  """
  A human-friendly description for this rate.
  """
  description: String

  """
  The flight minimum days amount required to spend for this rate.
  """
  flightMinimum: Float!

  """
  The ID of the rate.
  """
  id: ID!

  """
  The minimum amount required to spend for this rate.
  """
  minSpendAmount: Float
    @deprecated(
      reason: "Use monthlyBudgetMinimum, monthlyImpressionMinimum, or flightMinimum instead"
    )

  """
  The monthly budget minimum amount required to spend for this rate.
  """
  monthlyBudgetMinimum: Float!

  """
  The monthly impression minimum amount required to spend for this rate.
  """
  monthlyImpressionMinimum: Float!

  """
  The rate card that owns this rate.
  """
  rateCard: RateCard!

  """
  The retail amount for this rate.
  """
  retailAmount: Float!

  """
  The date that this rate was updated.
  """
  updated: DateTime!

  """
  The wholesale amount for this rate.
  """
  wholesaleAmount: Float!
}

type HierarchyProductRatesResponse {
  rates: [HierarchyProductRateResponse!]!
}

input HierarchyProductRequest {
  customName: String
  goalTypes: [AllocationGoalType!]
  hierarchyId: ID!
  productId: ID!
  rateCardId: ID
}

enum HierarchyProductStatus {
  DISABLED
  ENABLED
}

type HierarchyProducts {
  results: [HierarchyProduct!]!
}

enum HierarchyType {
  ADVERTISER
  HIERARCHY
}

"""
A "linked account" in the Improvado API, which is an organizational unit (usually an advertiser) about which we
receive advertising data.
"""
type ImprovadoAccount {
  """
  The datasource-specific identifier for the account. For example, a Facebook ad account id.
  """
  accountId: String!

  """
  The datasource-specific name for the account.
  """
  accountName: String!

  """
  The datasource of this account.
  """
  datasource: ImprovadoDatasource!

  """
  A unique, Improvado-specific id.
  """
  id: ID!

  """
  Whether or not report data should be loaded into our data pipeline for this account.
  """
  v2UploadFlag: Boolean!
}

"""
A page of Improvado accounts.
"""
type ImprovadoAccounts {
  """
  The page information.
  """
  pageInfo: PageInfo!

  """
  The page of results.
  """
  results: [ImprovadoAccount!]!
}

"""
Criteria by which Improvado accounts may be filtered.
"""
input ImprovadoAccountsFilterInput {
  """
  The subagency identifier.
  """
  datasource: ImprovadoDatasource!

  """
  The hierarchy id.
  """
  hierarchyId: ID!
}

"""
Input for starting the Improvado authorization flow.
"""
input ImprovadoAuthorizationInput {
  """
  The datasource to be authorized.
  """
  datasource: ImprovadoDatasource!

  """
  The hierarchy id in which the resulting authorization applies.
  """
  hierarchyId: ID!
}

"""
A connected account in Improvado. For example, a Facebook account in which Improvado has been granted access to pull
report data.
"""
type ImprovadoConnection {
  """
  The datasource of this connection.
  """
  datasource: ImprovadoDatasource!

  """
  A unique identifier for the connection.
  """
  id: ID!

  """
  A human-readable name for this connection.
  """
  name: String!

  """
  The status of this connection.
  """
  status: String!
}

"""
The input to the improvadoConnections query, which finds connected accounts associated with the subagency for the
given hierarchy.
"""
input ImprovadoConnectionsInput {
  """
  If provided, filters the results to those with the given datasource.
  """
  datasource: ImprovadoDatasource

  """
  The hierarchy id in which to search for connections.
  """
  hierarchyId: ID!
}

"""
Represents a DSP or advertising platform from which we can obtain advertising data (e.g., “Google Ad Manager” or “Facebook”)
"""
enum ImprovadoDatasource {
  AD_MANAGER
  BING
  FACEBOOK
  STACKADAPT
}

"""
A page of Improvado subagencies.
"""
type ImprovadoSubagencies {
  """
  The page information.
  """
  pageInfo: PageInfo!

  """
  The page of results.
  """
  results: [ImprovadoSubagency!]!
}

"""
The input to the improvadoSubagenciesByAccount query.
"""
input ImprovadoSubagenciesByAccountInput {
  """
  A list of account ids for which subagency mappings are desired.
  """
  accountIds: [ID!]!

  """
  The datasource which all the accountIds apply.
  """
  datasource: ImprovadoDatasource!
}

"""
Criteria by which Improvado subagencies may be filtered.
"""
input ImprovadoSubagenciesFilterInput {
  """
  The hierarchy id.
  """
  hierarchyId: ID

  """
  The subagency identifier.
  """
  identifier: String
}

"""
A subagency in Improvado, which is associated with a hierarchy.
"""
type ImprovadoSubagency {
  """
  The date the subagency was created.
  """
  created: DateTime!

  """
  The hierarchy.
  """
  hierarchy: Hierarchy!

  """
  The hierarchy id.
  """
  hierarchyId: ID!

  """
  The unique identifier for this subagency in Improvado.
  """
  identifier: String!

  """
  The date the subagency was most recently updated.
  """
  updated: DateTime!
}

"""
Associates an account id with a list of ImprovadoSubagencies.
"""
type ImprovadoSubagencyAccountMapping {
  """
  An Improvado account id.
  """
  accountId: ID!

  """
  The subagencies with access to this Improvado account.
  """
  subagencies: [ImprovadoSubagency!]!
}

type IndustriesResponse {
  industries: [IndustryDTO!]!
}

type IndustryDTO {
  id: Float!
  microIndustries: [MicroIndustryDTO!]!
  name: String!
}

"""
Contains details about starting the Improvado authorization flow.
"""
type InitializeImprovadoAuthorizationDetails {
  """
  An expiring URL for an iframe that can be used to launch the Improvado authorization flow for a
  single datasource.
  """
  iframeUrl: String!
}

"""
A date interval.
"""
type Interval {
  """
  The inclusive interval end date of the result.
  """
  endDate: Date!

  """
  The inclusive interval start date of the result.
  """
  startDate: Date!
}

"""
Interval resolution for grouping analytics data by date.
"""
enum IntervalResolution {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

"""
JSON Scalar Type
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type JsonPreferenceGroupType {
  created: DateTime!
  id: ID!
  key: String!
  updated: DateTime!
  user: User!
  userId: String!
  value: JSON!
}

type JsonPreferenceType {
  created: DateTime!
  id: ID!
  key: String!
  updated: DateTime!
  user: User!
  userId: String!
  value: JSON!
}

type LatLongType {
  city: String
  country: String
  latitude: Float
  longitude: Float
  region: String
}

"""
An Order Line Item.
"""
type LineItem {
  """
  The active rate.
  """
  activeRate: Rate

  """
  The id of the active rate.
  """
  activeRateId: ID

  """
  The advertiser associated with this line item.
  """
  advertiser: Advertiser

  """
  The ID of advertiser associated with this line item.
  """
  advertiserId: ID

  """
  The advertiser location IDs associated with this line item.
  """
  advertiserLocationIds: [ID!]!

  """
  The advertiser locations associated with this line item.
  """
  advertiserLocations: [Location]!

  """
  The advertising product being ordered.
  """
  advertisingProduct: AdvertisingProduct

  """
  The allocation rollups associated with this line item.
  """
  allocationRollups: [LineItemAllocationRollup!]!

  """
  The allocations associated with this line item.
  """
  allocations: [LineItemAllocation!]!

  """
  The user assigned to this line item.
  """
  assignee: User

  """
  The ID of the user assigned to this line item.
  """
  assigneeUserId: ID

  """
  The amount of dollars allocated.
  """
  budget: Float
    @deprecated(reason: "This is a legacy concept that has been deprecated by `retailBudget`")

  """
  The campaigns associated with this line item.
  """
  campaigns: [LineItemCampaign!]!

  """
  The date and time this line item was created.
  """
  created: DateTime!

  """
  The date the line item became an official order.
  """
  dateOfOrder: Date

  """
  The date the line item was added to a proposal.
  """
  dateOfProposal: Date

  """
  The date this line item ends.
  """
  endDate: Date!

  """
  The list of flags on the line item.
  """
  flags: [String!]!

  """
  The IDs of the users following this line item.
  """
  followerUserIds: [String!]!

  """
  The users following this line item.
  """
  followers: [User!]!

  """
  Geolocations associated with this line item.
  """
  geoLocations: GeoLocations

  """
  The hierarchy product associated with this line item.
  """
  hierarchyProduct: HierarchyProduct

  """
  The ID of the hierarchy product associated with this line item.
  """
  hierarchyProductId: ID
  id: ID!

  """
  The message conversation associated with this line item.
  """
  messageConversation: ConversationType

  """
  The ID of message conversation associated with this line item.
  """
  messageConversationId: ID

  """
  The last date and time that the message conversation had an update.
  """
  messageConversationUpdated: DateTime

  """
  The name of the line item.
  """
  name: String!

  """
  The notes conversation associated with this line item.
  """
  notesConversation: ConversationType

  """
  The ID of notes conversation associated with this line item.
  """
  notesConversationId: ID

  """
  The order associated with this line item.
  """
  order: Order!

  """
  The ID of the user that created the order associated with this line item.
  Equivalent to `order { createdByUserId }`.
  """
  orderCreatedByUserId: ID!

  """
  The id of the order associated with this line item.
  """
  orderId: ID!

  """
  The ID product being ordered.
  """
  productId: ID

  """
  Information specific to the line item's product (defined by the productKey)
  """
  productInfo: JSON

  """
  The legacy product key associated with this line item.
  """
  productKey: String
    @deprecated(
      reason: "This is a legacy concept that has been deprecated by the hierarchy product"
    )

  """
  The product listing being ordered.
  """
  productListing: AdvertiserProductListing

  """
  Freeform notes to store additional info about the proposed phase of the line item
  """
  proposalNotes: String

  """
  The rate card associated with this line item.
  """
  rateCard: RateCard

  """
  The id of the rate card.
  """
  rateCardId: ID

  """
  The user requesting this line item.
  """
  requester: User

  """
  The ID of the user requesting this line item.
  """
  requesterUserId: ID

  """
  The retail budget of the line item, calculated from the sum of retail budgets from `allocations`
  """
  retailBudget: Float

  """
  The date this line item starts.
  """
  startDate: Date!

  """
  The status of the line item.
  """
  status: LineItemStatus!

  """
  The targeting information associated with this line item.
  """
  targeting: LineItemTargeting

  """
  The date and time this line item was last updated.
  """
  updated: DateTime!
}

"""
The amount allocated to a specific goal for a date range.
The units for goal amount are determined by the goal type. This can be dollars, impressions, clicks, ect.
"""
type LineItemAllocation {
  """
  The start date and end date of this allocation.
  """
  dateRange: LineItemAllocationDateRange!

  """
  The allocation goal amount for the provided goal type and goal subtype.
  """
  goalAmount: Float!

  """
  The goal sub-type of the allocation. Used for identifying special allocation scenarios.
  """
  goalSubtype: AllocationGoalSubtype!

  """
  The goal type of the allocation.
  """
  goalType: AllocationGoalType!
  id: ID!

  """
  The ID of the line item this allocation belongs to.
  """
  lineItemId: ID!

  """
  The allocated retail budget.
  """
  retailBudget: Float
}

type LineItemAllocationDateRange {
  """
  The ending date.
  """
  end: Date!

  """
  The starting date.
  """
  start: Date!
}

input LineItemAllocationDateRangeInput {
  """
  The ending date.
  """
  end: Date!

  """
  The starting date.
  """
  start: Date!
}

input LineItemAllocationInput {
  """
  The allocation's start and end dates.
  """
  dateRange: LineItemAllocationDateRangeInput!

  """
  The allocation goal amount for the provided goal type and goal subtype. If this is not provided, a `retailBudget` must be provided.
  """
  goalAmount: Float

  """
  The goal sub-type of the allocation. Used for identifying special allocation scenarios.
  """
  goalSubtype: AllocationGoalSubtype!

  """
  The goal type of the allocation.
  """
  goalType: AllocationGoalType!

  """
  The dollar amount budgeted for the allocation. If this is not provided, a `goalAmount` must be provided.
  """
  retailBudget: Float
}

"""
Represents multiple LineItemAllocations grouped by `dateRange` and `goalSubtype`
"""
type LineItemAllocationRollup {
  allocationIds: [ID!]!
  allocations: [LineItemAllocation!]!
  dateRange: LineItemAllocationDateRange!
  goalAmounts: LineItemAllocationRollupGoalAmounts!
  goalSubtype: AllocationGoalSubtype!
  lineItem: LineItem!
  lineItemId: ID!
  retailBudgetSum: Float!
}

"""
Contains the amounts for a single allocation goal. Typically, only one field in this object
will be present.
"""
type LineItemAllocationRollupGoalAmounts {
  budget: Float
  clicks: Float
  impressions: Float
  views: Float
}

"""
Contains the amounts for a single allocation goal. Multiple values can be specified to update values across different goal types.
"""
input LineItemAllocationRollupGoalAmountsInput {
  budget: Float
  clicks: Float
  impressions: Float
  views: Float
}

"""
Ways in which `lineItemAllocations` query results can be filtered.
"""
input LineItemAllocationsFilterInput {
  """
  Filter line item allocations by the line items they belong to
  """
  lineItemIds: [ID!]
}

"""
Response type for `query lineItemAllocations`.
"""
type LineItemAllocationsResponse {
  """
  The page information.
  """
  pageInfo: PageInfo!

  """
  The page of results.
  """
  results: [LineItemAllocation!]!
}

type LineItemBasicTargeting {
  """
  A description of the targets.
  """
  description: String

  """
  The targets for this line item.
  """
  targets: [String!]
}

input LineItemBasicTargetingInput {
  """
  A description of the targets.
  """
  description: String

  """
  The targets to assign for this line item.
  """
  targets: [String!]
}

"""
The linkage between a line item and a campaign hosted on an external platform.
"""
type LineItemCampaign {
  """
  The ID of the campaign on the external platform.
  """
  externalCampaignId: ID!
  id: ID!

  """
  The ID of the line item.
  """
  lineItemId: ID!

  """
  A human readable name for the campaign.
  """
  name: String!

  """
  The platform where the campaign is hosted.
  """
  platform: Platform!
}

"""
Response type for `query campaigns`.
"""
type LineItemCampaignsResponse {
  """
  The page information.
  """
  pageInfo: PageInfo!

  """
  The page of results.
  """
  results: [LineItemCampaign!]!
}

"""
Ways in which line items can be filtered by date.
"""
input LineItemDateFilters {
  """
  Refers to the date that the order became an order. Entries with a null value will never be returned.
  """
  dateOfOrder: [DateFilter]

  """
  Refers to the date that the order became a proposal. Entries with a null value will never be returned.
  """
  dateOfProposal: [DateFilter]

  """
  Refers to the date time that a line item ends.
  """
  ended: [DateFilter]

  """
  Refers to the date time that a line item was purchased (created).
  """
  purchased: [DateTimeFilter]

  """
  Refers to the date time that a line item starts.
  """
  started: [DateFilter]

  """
  Refers to the date time that a line item was last updated.
  """
  updated: [DateTimeFilter]
}

type LineItemGeoTargeting {
  """
  A description of the targets.
  """
  description: String

  """
  The file ID to associate with the geo targeting for this line item.
  """
  fileId: ID!
}

input LineItemGeoTargetingInput {
  """
  A description of the targets.
  """
  description: String

  """
  The file ID to associate with the geo targeting for this line item.
  """
  fileId: ID!
}

"""
Input for creating a line item.
"""
input LineItemInput {
  """
  The advertiser location IDs for this line item.
  """
  advertiserLocationIds: [ID!]

  """
  Provide allocations for the line item. When `null`, default allocations will be created.

  **Default Allocations**

  An allocation will be created for each month between the order's proposed start date and proposed end date
  and each goal type of the associated product.
  """
  allocations: [LineItemAllocationInput!]

  """
  The assignee's user id. An empty string is treated as null.
  """
  assigneeUserId: ID

  """
  The follower user ids.
  """
  followerUserIds: [String!]

  """
  The geo locations for this line item.
  """
  geoLocations: GeoLocationsInput

  """
  The message conversation ID.
  """
  messageConversationId: ID

  """
  The name of the line item.
  """
  name: String!

  """
  The notes conversation ID.
  """
  notesConversationId: ID

  """
  The product this line item pertains to.
  """
  productId: ID

  """
  Information specific to the line item's product (defined by the productKey).
  """
  productInfo: JSON

  """
  The requesting user's id. Defaults to the requester of the order if null or empty.
  """
  requesterUserId: ID

  """
  The status of the line item.
  """
  status: LineItemStatus = NEW

  """
  The targeting information for this line item.
  """
  targeting: LineItemTargetingInput
}

"""
Fields that a `LineItem` can be sorted by.
"""
enum LineItemSortableField {
  BUDGET
  DATE_OF_ORDER
  DATE_OF_PROPOSAL
  END_DATE
  FLAGS

  """
  Sort by `messageConversationUpdated`.
  """
  MESSAGE_CONVERSATION_UPDATED

  """
  Sort by whether `messageConversationUpdated` *is* or *is not* `null`.

  - When direction is `ASC`, `null` values are returned last.
  - When direction is `DESC`, `null` values are returned first.
  """
  MESSAGE_CONVERSATION_UPDATED_NULLS
  NAME
  PURCHASE_DATE
  RETAIL_BUDGET
  START_DATE
  STATUS
}

enum LineItemStatus {
  CANCELED
  COMPLETE
  DRAFT
  LIVE
  NEW
  PAUSED
  PENDING
  SOLD
}

type LineItemTargeting {
  """
  Behavioral targeting.
  """
  behavioral: LineItemBasicTargeting

  """
  Content targeting.
  """
  content: LineItemBasicTargeting

  """
  Demographic targeting.
  """
  demographic: LineItemBasicTargeting

  """
  Geographic targeting.
  """
  geo: LineItemGeoTargeting
}

input LineItemTargetingInput {
  """
  Behavioral related targeting.
  """
  behavioral: LineItemBasicTargetingInput

  """
  Content related targeting.
  """
  content: LineItemBasicTargetingInput

  """
  Demographic related targeting.
  """
  demographic: LineItemBasicTargetingInput

  """
  Geographic related targeting.
  """
  geo: LineItemGeoTargetingInput
}

"""
Ways in which `lineItems` query results can be filtered.
"""
input LineItemsFilterInput {
  """
  Select line items associated with any of the specified advertisers.
  """
  advertiserIds: [ID!]

  """
  Select line items assigned to or followed by the specified user.
  """
  assigneeUserIdOrFollowerUserId: String

  """
  Select line items assigned to any of the specified users.
  """
  assigneeUserIds: [String!]

  """
  Select line items filtered by various dates
  """
  dates: LineItemDateFilters

  """
  Select line items with any of the specified flags.
  Example: `["Needs response", "Missing Information"]`
  """
  flags: [String!]

  """
  Select line items followed by any of the specified users.
  """
  followerUserIds: [String!]

  """
  Select line items associated with the specified hierarchy.
  A line item is _associated_ with a hierarchy if the line item's advertiser belongs to the hierarchy.
  """
  hierarchyId: ID

  """
  Select line items with the specified ids.
  """
  ids: [ID!]

  """
  filter by `retailBudget` less than or equal to this value
  """
  maxRetailBudget: Float

  """
  Select line items associated with any of the specified message conversations.
  """
  messageConversationIds: [ID!]

  """
  filter by `retailBudget` greater than or equal to this value
  """
  minRetailBudget: Float

  """
  Select line items associated with any of the specified orders.
  """
  orderIds: [ID!]

  """
  Select line items with any of the specified owner emails.
  """
  ownerEmails: [String!]

  """
  Select line items associated with any of the specified products.
  """
  productIds: [ID!]

  """
  Select line items filtered by the specified query.
  Line items with a name that contains `query` OR line items with an id equal to `query` will be returned.

  ### Examples

  `query: "Apple"` would match orders with the names:
  - `Apple`
  - `Tasty Apple`
  - `Applesauce`

  `query: "123"` would match:
  - An order with id `123`
  - An order with name `Order for 123 Apples`
  """
  query: String

  """
  Select line items requested by any of the specified users.
  """
  requesterUserIds: [String!]

  """
  Select line items with any of the specified statuses.
  """
  statuses: [LineItemStatus!]

  """
  Select line items created by any of the specified users.
  """
  userIds: [String!]
}

"""
Response type for `query lineItems`.
"""
type LineItemsResponse {
  """
  The page information.
  """
  pageInfo: PageInfo!

  """
  The page of results.
  """
  results: [LineItem!]!
}

"""
How to sort `lineItems` query results.
"""
input LineItemsSortInput {
  """
  The direction of the sorting. Defaults to ascending.
  """
  direction: SortDirection

  """
  The field by which results are sorted.
  """
  field: LineItemSortableField!
}

"""
Associates an "internal" advertiser with an advertiser that exists in a third-party advertising platform.
"""
type LinkedAdvertiser {
  """
  The advertiser.
  """
  advertiser: Advertiser!

  """
  The id of the advertiser.
  """
  advertiserId: Int! @deprecated(reason: "Use advertiser.guid")

  """
  The user who created this linked advertiser. Not always set.
  """
  createdByUserId: ID

  """
  The advertiser that exists in a third-party advertising platform.
  """
  externalAdvertiser: ExternalAdvertiser!

  """
  The primary key for this linked advertiser.
  """
  id: ID!

  """
  The hierarchy whose integration is the source of the external advertiser being linked.
  """
  sourceHierarchyId: ID!
}

"""
Paginated Linked Advertisers.
"""
type LinkedAdvertisers {
  pageNumber: Int!
  pageSize: Int!
  results: [LinkedAdvertiser!]!
  totalCount: Int!
  totalPages: Int!
}

"""
Input for `linkedAndUnlinkedCampaigns`
"""
input LinkedAndUnlinkedCampaignFilterInput {
  """
  The Adcellerant ID of the advertiser
  """
  advertiserId: String!

  """
  The platform to get linked/unlinked campaigns for
  """
  platform: Platform!
}

type LinkedAndUnlinkedCampaigns {
  linked: [PlatformCampaign!]!
  unlinked: [UnlinkedPlatformCampaign!]!
}

"""
Response type for `query linkedAndUnlinkedCampaignsResponse`.
"""
type LinkedAndUnlinkedCampaignsResponse {
  """
  The campaigns that are linked to the advertiser already.
  """
  linked: [LineItemCampaign!]!

  """
  The campaigns that are not linked to the advertiser already.
  """
  unlinked: [ExternalCampaignResponse!]!
}

"""
Federated `Location` entity
"""
type Location {
  address: String!
  advertiserId: Int!
  businessHours: [BusinessHour!]!
  created: DateTime!
  createdBy: User
  createdUserId: String
  id: Float!
  name: String!
  phoneNumber: String
  updated: DateTime!
  websiteUrl: String
}

input LocationInput {
  city: String!
  country: String!
  region: String!
}

input LoginInput {
  password: String!
  username: String!
}

type ManualCustomCampaign {
  budget: Float
  details: String
  end: DateTime
  id: Float!
  isRecommended: Boolean!
  monthlyBudget: [Float!]
  name: String
  product: String
  proposalId: Float!
  start: DateTime
  status: CampaignStatus
}

type ManualDisplayCampaign {
  behavioralTargets: [String!]
  budget: Float
  contentTargets: [String!]
  cpm: Float
  demographicTargets: [String!]
  details: String
  end: DateTime
  forecast: CampaignForecast
  id: Float!
  isRecommended: Boolean!
  monthlyBudget: [Float!]
  name: String
  nativeTargets: [String!]
  note: Note
  product: String
  proposalId: Float!
  proposedImpressions: Float
  start: DateTime
  status: CampaignStatus
}

type ManualEmailCampaign {
  addOns: [String!]
  budget: Float
  campaignBudget: Float
  consumerInterestTargets: [String!]
  consumerLifestyleTargets: [String!]
  cpm: Float
  demographicTargets: [String!]
  flatFee: Float
  id: Float!
  isFlatFeeBased: Boolean
  isRecommended: Boolean!
  name: String
  note: Note
  product: String
  proposalId: Float!
  proposedSends: Float
  start: DateTime
  status: CampaignStatus
}

type ManualGeofencingCampaign {
  audienceTargeting: String
  budget: Float
  cpm: Float
  details: String!
  end: DateTime!
  id: Float!
  isRecommended: Boolean!
  locationsFileId: Float
  locationsFileUri: String
  monthlyBudget: [Float!]!
  name: String
  note: Note
  product: String
  proposalId: Float!
  proposedImpressions: Float
  setupFee: Float
  start: DateTime
  status: CampaignStatus
}

type ManualSEMCampaign {
  adSpend: Float
  budget: Float
  end: DateTime
  id: Float!
  isRecommended: Boolean!
  managementFee: Float
  monthlyBudget: [Float!]
  name: String
  note: Note
  product: String
  proposalId: Float!
  start: DateTime
  status: CampaignStatus
}

type ManualSEOCampaign {
  budget: Float
  end: DateTime
  franchiseMultiLocation: Boolean
  id: Float!
  isRecommended: Boolean!
  monthsDuration: Float
  name: String
  note: Note
  numberOfLocations: Float
  product: String
  proposalId: Float!
  start: DateTime
  status: CampaignStatus
}

type ManualSocialMediaCampaign {
  adSpend: Float
  behavioralTargets: [String!]
  budget: Float
  end: DateTime
  id: Float!
  isRecommended: Boolean!
  managementFee: Float
  monthlyBudget: [Float!]
  name: String
  note: Note
  product: String
  proposalId: Float!
  proposedImpressions: Float
  setupFee: Float
  start: DateTime
  status: CampaignStatus
}

type ManualSpecializedCampaign {
  adSpend: Float
  automateTicketCreation: Boolean
  budget: Float
  cpm: Float
  csvFileId: Float
  description: String
  end: DateTime
  id: Float!
  impressions: Float
  isCPVBased: Boolean
  isRecommended: Boolean!
  managementFee: Float
  monthlyBudget: [Float!]
  monthsDuration: Float
  name: String
  note: Note
  product: String
  proposalId: Float!
  start: DateTime
  status: CampaignStatus
}

type ManualStreamingAudioCampaign {
  behavioralTargets: [String!]
  budget: Float
  contentTargets: [String!]
  cpm: Float
  demographicTargets: [String!]
  end: DateTime
  id: Float!
  isRecommended: Boolean!
  monthlyBudget: [Float!]
  name: String
  note: Note
  product: String
  proposalId: Float!
  proposedImpressions: Float
  start: DateTime
  status: CampaignStatus
}

type ManualVideoCampaign {
  addOns: [String!]
  behavioralTargets: [String!]
  budget: Float
  contentTargets: [String!]
  cpm: Float
  cpv: Float
  demographicTargets: [String!]
  details: String
  end: DateTime
  id: Float!
  isCPVBased: Boolean
  isRecommended: Boolean!
  monthlyBudget: [Float!]
  name: String
  note: Note
  product: String
  proposalId: Float!
  proposedImpressions: Float
  start: DateTime
  status: CampaignStatus
  views: Float
}

"""
A mapbox boundary subgraph
"""
type MapboxBoundary {
  bounds: [Float!]
  centroid: [Float!]

  """
  The city
  """
  city: String @deprecated(reason: "field exists solely for ApolloFederation")

  """
  The country
  """
  country: String @deprecated(reason: "field exists solely for ApolloFederation")
  featureId: String!
  fullyQualifiedName: String!
  layer: MapboxBoundaryLayer!
  layerLabel: String!
  level: Float!
  name: String!
  names: [String!]
  polyLayerName: String!
  polyTilesetName: String!

  """
  The region
  """
  region: String @deprecated(reason: "field exists solely for ApolloFederation")
  type: String!

  """
  The zipcode
  """
  zipcode: String
}

enum MapboxBoundaryLayer {
  adm0
  adm1
  adm2
  loc1
  loc2
  pos4
}

type MapboxBoundaryResponse implements PaginatedResponse {
  pageNumber: Int!
  pageSize: Int!
  results: [MapboxBoundary!]!
  totalCount: Int
  totalPages: Int
}

input MarkNotificationAsUnreadInput {
  id: Float!
}

type MessageType {
  author: User!
  authorEmail: String
  authorId: String
  body: String
  conversation: ConversationType!
  conversationId: Float!
  created: DateTime!
  fileIds: [Int!]!
  files: [File!]!
  id: Int!
  isInternal: Boolean!
  title: String
  updated: DateTime!
}

type MessagesResponse {
  pageInfo: CursorPageInfo!
  results: [MessageType!]!
}

type MicroIndustries {
  microIndustries: [MicroIndustryDTO!]!
}

type MicroIndustryDTO {
  id: Float!
  industryId: Float!
  name: String!
}

type Mutation {
  activateUser(activateUserInput: ActivateUserInput!): User!

  """
  Add a single allocation to a line item.
  """
  addAllocationToLineItem(
    """
    The allocation to add to the line item.
    """
    input: LineItemAllocationInput!

    """
    The ID of the line item.
    """
    lineItemId: ID!
  ): AddAllocationToLineItemResponse!

  """
  Add Content to Creative
  """
  addContentToCreative(input: AddContentToCreativeInput!): CreativeContent!
  addFollowersToOrderDetail(followerUserIds: [String!]!, orderDetailId: Float!): OrderDetailType

  """
  Add geo locations to every line item on an order.
  """
  addGeoLocationsToOrder(
    """
    Geo locations to add to every line item on the order.
    """
    input: GeoLocationsInput!

    """
    The id of the order.
    """
    orderId: ID!
  ): Order!

  """
  Add a line item to an order.
  """
  addLineItem(
    """
    Paramaters for the line item being added to the order.
    """
    input: LineItemInput!

    """
    The id of the order.
    """
    orderId: ID!
  ): LineItem!
  addListenerUserEmailsToConversation(
    input: UpdateConversationListenerUserEmailsInput!
  ): ConversationType!
  addListenerUserIdsToConversation(id: Int!, userIds: [String!]! = []): ConversationType!
  addMessageToConversation(
    authToken: ConversationAuthInput

    """
    The author of the message. Can only be used when authenticated via internal request token.
    """
    authorId: ID
    body: String
    conversationId: Float!
    fileIds: [Int!] = []
    isInternal: Boolean
    notificationData: NotificationDataInput
    title: String
  ): MessageType!
    @deprecated(
      reason: "This mutation is deprecated in favor of addMessageToConversations. Allows the ability to message a single or multiple conversations"
    )
  addMessageToConversations(input: AddMessageToConversationsInput!): [MessageType!]!
  addMessageToOrderDetailConversation(input: AddMessageToConversationInput!): MessageType!
    @deprecated(reason: "This mutation is deprecated and will be removed in the future.")
  addToJsonPreferenceGroup(key: String!, value: JSON!): JsonPreferenceGroupType!
  addUserNotifications(
    emailTemplateId: String!
    notifications: [CreateNotificationInput!]!
    subject: String!
  ): CreateNotificationResponse!
  archiveProposal(id: Float!): ProposalType!

  """
  Clears locally stored conversion tracking labels for the given Tradedesk campaigns. The effect is that the next time
  the labels are requested for the campaign, they will be re-fetched from Tradedesk.
  """
  clearTradedeskCampaignConversionTrackingLabels(
    input: ClearTradedeskCampaignConversionTrackingLabelsInput!
  ): [TradedeskCampaignConversionTrackingLabelSet!]!

  """
  Clone a line item.
  """
  cloneLineItem(input: CloneLineItemInput!): LineItem!

  """
  Clone an order.
  """
  cloneOrder(input: CloneOrderInput!): Order!
  cloneProposal(id: Float!, name: String): ProposalType!

  """
  Clones the rate card with the given ID
  """
  cloneRateCard(id: ID!): RateCard!
  createAdditionalReport(advertiserId: Int!, iframeUrl: String!, name: String!): AdditionalReport!
  createAdvertiser(input: CreateAdvertiserInput!): Advertiser!

  """
  Advertising Product Mutations
  """
  createAdvertisingProduct(request: AdvertisingProductRequest!): AdvertisingProduct!

  """
  Create a campaign on a line item.
  """
  createCampaign(input: CreateCampaignInput!): LineItemCampaign!
  createConversation(
    context: Context
    listenerUserEmails: [String!]! = []
    listenerUserIds: [String!]! = []
  ): ConversationType!

  """
  Create Creative
  """
  createCreative(input: CreateCreativeInput!): Creative!
  createDirectHubUser(input: CreateDirectHubUserInput!): User!

  """
  Create a file
  """
  createFile(input: CreateFileInput!): CreatedFile!

  """
  Create a file upload URI.  If you want the file created to be deleted at some point in the future, pass in a unix timestamp to the `fileExpiryEpochSeconds` field, otherwise leave the field null and the file will be retained permanently.
  """
  createFileUpload(
    authToken: ConversationAuthInput
    fileExpiryEpochSeconds: Float
    fileExtension: String!
    filename: String!
  ): FileUpload!
  createHierarchy(input: CreateHierarchyInput!): Hierarchy!

  """
  Hierarchy Product Mutations
  """
  createHierarchyProduct(request: HierarchyProductRequest!): HierarchyProduct!

  """
  Create a Linked Advertiser.
  """
  createLinkedAdvertiser(input: CreateLinkedAdvertiserInput!): LinkedAdvertiser

  """
  Create a Linked Advertiser, and auto-create an external advertiser if it doesn't exist. The resulting external
  advertiser's name will be set to the platformAdvertiserId.
  """
  createLinkedAdvertiserAndExternalAdvertiser(input: CreateLinkedAdvertiserInput!): LinkedAdvertiser
  createLocation(
    address: String!
    advertiserId: Int!
    businessHours: [CreateBusinessHourInput!]
    name: String!
    phoneNumber: String
    websiteUrl: String
  ): Location!

  """
  Create a managed Order
  """
  createManagedOrder(
    """
    Parameters for `createManagedOrder`.
    """
    input: CreateManagedOrderInput!
  ): Order!
  createOrder(order: CreateOrderInput!): OrderType!
  createOrderDetail(createOrderDetailInput: CreateOrderDetailInput!): OrderDetailType!
  createProposal(input: CreateProposalInput!): ProposalType!

  """
  Create a proposed Order
  """
  createProposedOrder(
    """
    Parameters for `createProposedOrder`.
    """
    input: CreateProposedOrderInput!
  ): Order!

  """
  Creates a rate with the given input
  """
  createRate(input: CreateRateInput!): Rate!

  """
  Creates a rate card with the given input
  """
  createRateCard(input: CreateRateCardInput!): RateCard!
  createRecommendedProposal(input: CreateRecommendedProposalInput!): ProposalType!
  createUser(createUserInput: CreateUserInput!): User!

  """
  Create an Order.

  **Examples**

  *Create a Draft Order:*

  ```
  dapi_createOrder(input: {
      dateOfOrder: "2023-01-01" # Usually the current date
      source: ORDER_MANAGEMENT
      status: DRAFT
      name: "..."
      proposedStartDate: "2023-01-01"
      proposedEndDate: "2023-02-01"
  }) {
      dateOfOrder
      dateOfProposal # Will be null
      source
      status
      name
      proposedStartDate
      proposedEndDate
  }
  ```

  *Create a Draft Proposal:*

  ```
  dapi_createOrder(input: {
      source: PROPOSAL
      status: DRAFT
      name: "..."
      proposedEndDate: "2023-02-01"
      proposedStartDate: "2023-01-01"
  }) {
      dateOfOrder # Will be null
      dateOfProposal
      source
      status
      name
      proposedStartDate
      proposedEndDate
  }
  ```
  """
  dapi_createOrder(
    """
    Parameters for `dapi_createOrder`.
    """
    input: dapi_CreateOrderInput!
  ): Order!

  """
  Update an existing Order
  """
  dapi_updateOrder(
    """
    The UpdateOrderInput that will be applied to the order
    """
    input: UpdateOrderInput!
  ): Order!
  deactivateUser(deactivateUserInput: ActivateUserInput!): User!
  deleteAdditionalReport(id: Float!): Int!

  """
  Delete an allocation.
  """
  deleteAllocation(id: ID!): DeleteAllocationResponse!
  deleteAndCreateOrderDetail(
    createOrderDetailInput: CreateOrderDetailInput!
    deleteOrderDetailId: Float!
  ): DeleteAndCreateOrderDetailType!

  """
  Delete a campaign.
  """
  deleteCampaign(id: ID!): Boolean

  """
  Delete a file
  """
  deleteFile(id: ID!): Boolean!
  deleteFromJsonPreferenceGroup(id: [Int!]!, key: String!): Boolean!
  deleteJsonPreference(key: String!): Boolean!
  deleteJsonPreferenceGroup(key: String!): Boolean!

  """
  Delete a line item.
  """
  deleteLineItem(id: ID!): Boolean

  """
  Delete a Linked Advertiser.
  """
  deleteLinkedAdvertiser(input: DeleteLinkedAdvertiserInput!): LinkedAdvertiser
  deleteOrderDetail(id: Float!): Int!
  deletePlatformCampaign(campaignId: Float!): Float!

  """
  Delete the rate with the given id.
  """
  deleteRate(id: ID!): Rate

  """
  Disable a Hierarchy Product and its descendants.
  """
  disableHierarchyProduct(id: ID!): DisabledHierarchyProducts!

  """
  Enable a Hierarchy Product and its descendants if the parent is also enabled.
  Also deletes any custom rate card associated with this hierarchy product
  if it is not an organization. Always deletes any custom rate cards on descendants.
  """
  enableHierarchyProduct(id: ID!): EnabledHierarchyProducts!

  """
  Enable a product for an organization, *only*.

  This will result in the product being *enabled for the organization*, but *disabled for descendants*: partner, division, ect.
  Will error if the hierarchyId provided is not an organization.
  """
  enableProductForOrganizationOnly(
    """
    The organization.
    """
    hierarchyId: ID!

    """
    The product.
    """
    productId: ID!
  ): HierarchyProduct!
  exportAdvertisingProductsCsv(filter: String, requestorId: String!): AggregateExportResult!
  exportProductsCsv(externalId: String!, requestorId: String!): AggregateExportResult!
  exportUsersCsv(filter: String, requestorId: String!): AggregateExportResult!
  forgotPassword(input: ForgotPasswordInput): Boolean!

  """
  When associating a new integration for a particular datasource (aka platform, like "facebook") for a particular
  hierarchy, this mutation will inform Improvado of this hierarchy, and we will relay a temporary iFrame URL that can
  be presented to the end-user to provide authentication details. This operation is idempotent.
  """
  initializeImprovadoAuthorization(
    input: ImprovadoAuthorizationInput!
  ): InitializeImprovadoAuthorizationDetails!
  login(input: LoginInput!): User!
  logout: Void
  markAllNotificationsAsRead: Int!
  markNotificationAsRead(id: Float!): NotificationType!
  markNotificationAsUnread(input: MarkNotificationAsUnreadInput!): NotificationType!
  markOrderDetailsAsSold(orderDetailIds: [Float!]!, proposalId: Float!): Boolean!
  password(updatePasswordInput: UpdatePasswordInput!): Boolean!
  powerpointFromOrder(orderId: ID!): File!

  """
  Promote an order from a state of PROPOSED to MANAGED
  """
  promoteOrderToManaged(
    """
    The id of the order to promote
    """
    orderId: ID!
  ): Order!

  """
  Re-applies the line item's conversation context, refreshing things like secondaryText.
  This does not change the updated date on the line item.
  """
  refreshLineItemConversationContext(
    """
    The ID of the line item.
    """
    lineItemId: ID!
  ): LineItem!
  removeFollowersFromOrderDetail(
    followerUserIds: [String!]!
    orderDetailId: Float!
  ): OrderDetailType
  removeListenerUserEmailsToConversation(
    input: UpdateConversationListenerUserEmailsInput!
  ): ConversationType!
  removeListenerUserIdsToConversation(id: Int!, userIds: [String!]! = []): ConversationType!

  """
  Reset fields of a HierarchyProductConfig.

  When a field is reset, its value will be inherited from the parent hierarchy.
  """
  resetHierarchyProductConfig(input: ResetHierarchyProductConfigInput!): HierarchyProductConfig!
  restoreProposal(id: Float!): ProposalType!
  saveJsonPreference(key: String!, value: JSON!): JsonPreferenceType!
  saveOrderDetailView(externalId: String!, requestorId: String!): AggregateExportResult!
  savePlatformCampaign(
    campaignId: Float
    externalCampaignId: String!
    name: String!
    orderDetailId: Float!
    platform: PlatformEnum!
  ): PlatformCampaign!

  """
  Send a templated email to one or more email addresses.
  """
  sendTemplatedEmail(input: SendTemplatedEmailInput!): Boolean
  setAdvertiserLogo(advertiserId: Float!, fileExtension: String!, filename: String!): FileUpload!
    @deprecated(
      reason: "Use createFile, which leverages dapiFiles directly, and then update the logoFileId via updateAdvertiser"
    )

  """
  Set a file to be deleted after the unix timestamp passed in as `fileExpiryEpochSeconds`.  If you do not want the file to be deleted, call this mutation without the `fileExpiryEpochSeconds` parameter.
  """
  setFileToBeDeleted(fileExpiryEpochSeconds: Float, fileId: Float!): File!
  setHierarchyLogo(fileExtension: String!, filename: String!, hierarchyId: Float!): FileUpload!
    @deprecated(
      reason: "Use createFile, which leverages dapiFiles directly, and then update the styleLogo via updateHierarchy"
    )
  submitApprovedCampaigns(campaigns: [ApproveCampaignData!]!, proposalId: Float!): ProposalType!
  submitProposalAsSold(
    id: Float!
    orderInsertionDetails: [ProposalOrderInsertionDetail!]!
    orderInsertionDetailsSem: [ProposalOrderInsertionDetailSem!]
    orderInsertionDetailsYouTube: [ProposalOrderInsertionDetailYouTube!]
  ): ProposalType!
  submitProposalForReview(id: Float!): ProposalType!

  """
  Synchronize the given hierarchy's products with its parent's products. All products that exist for the parent
  hierarchy will be associated with the given hierarchy, allowing them to be used (assuming they're enabled).
  All information is preserved except for the rate card, which is set to null - in other words, rates will
  be inherited from the parent.
  """
  synchronizeParentHierarchyProducts(hierarchyId: ID!): HierarchyProducts!
    @deprecated(reason: "This will become a noop once Hierarchy Product Configs are released.")

  """
  Unsubscribe from all email subscriptions.
  """
  unsubscribeAll(input: UnsubscribeInput!): Boolean
  updateAdditionalReport(
    advertiserId: Int!
    id: Int!
    iframeUrl: String!
    name: String!
  ): AdditionalReport!
  updateAdvertiser(input: UpdateAdvertiserInput!): Advertiser!

  """
  Update an Advertising Product.
  """
  updateAdvertisingProduct(input: UpdateAdvertisingProductInput!): AdvertisingProduct!

  """
  Update a campaign.
  """
  updateCampaign(input: UpdateCampaignInput!): LineItemCampaign!
  updateConversationContext(input: UpdateConversationContextInput!): ConversationType!
  updateConversationReferenceUrl(id: Int!, referenceUrl: String!): ConversationType!
  updateConversationSubject(id: Int!, subject: String!): ConversationType!

  """
  Update a file
  """
  updateFile(input: UpdateFileInput!): File!
  updateHierarchy(input: UpdateHierarchyInput!): Hierarchy!
  updateHierarchyProduct(id: ID!, request: UpdateHierarchyProductRequest!): HierarchyProduct!

  """
  Update how a product is configured within a hierarchy.
  """
  updateHierarchyProductConfig(input: UpdateHierarchyProductConfigInput!): HierarchyProductConfig!

  """
  Update a line item.
  """
  updateLineItem(input: UpdateLineItemInput!): LineItem!
  updateLocation(
    address: String
    businessHours: [UpdateBusinessHourInput!]
    locationId: Int!
    name: String
    phoneNumber: String
    websiteUrl: String
  ): Location!
  updateOrder(order: PatchOrderInput!): OrderType!
  updateOrderDetail(orderDetail: PatchOrderDetailInput!): OrderDetailType!
  updateOrderDetailsStatus(orderDetailIds: [Float!]!, status: String!): [OrderDetailType!]!

  """
  Updates requesters on an order and or line items.
  """
  updateOrderRequesters(input: UpdateOrderRequestersInput!): Order!
  updateProposal(input: UpdateProposalInput!): ProposalType!
  updateProposalRequestor(id: Float!, requestorId: String!): ProposalType!
  updateProposalStatus(id: Float!): ProposalType!

  """
  Updates a rate with the given input
  """
  updateRate(input: UpdateRateInput!): Rate!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserAvatar(updateUserAvatarInput: UpdateUserAvatarInput!): User!
  updateUserHierarchies(input: UpdateUserHierarchiesInput!): User!
  updateUserPermissions(updateUserPermissionsInput: UpdateUserPermissionsInput!): User!

  """
  Add an allocation rollup to a line item, or edit an existing one if it already exists.
  If an allocation rollup with the same date range and goal subtype is already present, any values given in the input will overwrite it.
  """
  upsertAllocationRollup(input: UpsertAllocationRollupInput!): LineItemAllocationRollup!

  """
  Upsert External Ad Groups.
  """
  upsertExternalAdGroups(input: UpsertExternalAdGroupsInput!): UpsertedExternalAdGroups

  """
  Upsert External Advertisers.
  """
  upsertExternalAdvertisers(input: UpsertExternalAdvertisersInput!): UpsertedExternalAdvertisers

  """
  Upsert External Campaigns.
  """
  upsertExternalCampaigns(input: UpsertExternalCampaignsInput!): UpsertedExternalCampaigns

  """
  Upsert Facebook Ad Group Audience Metadata.
  """
  upsertFacebookAdGroupAudiences(input: UpsertFacebookAdGroupAudiencesInput!): BulkWriteResult

  """
  Bulk Upsert Improvado Settings for Improvado Accounts. Only meant to be called as a devtool.
  """
  upsertImprovadoAccountSettings(
    input: UpsertImprovadoAccountSettingsInput!
  ): UpsertedImprovadoAccountSettings!

  """
  Upsert Tradedesk conversion labels for a set of campaigns.
  """
  upsertTradedeskCampaignConversionTrackingLabelSets(
    input: UpsertTradedeskCampaignConversionTrackingLabelSetsInput!
  ): [TradedeskCampaignConversionTrackingLabelSet!]!
}

type NameValueDataType {
  name: String!
  value: Float!
}

type NativeTarget {
  type: String!
  values: [NativeTargetValues!]!
}

type NativeTargetValues {
  value: String
}

type Note {
  body: String
  created: DateTime!
  header: String!
  id: Int!
  updated: DateTime!
}

input NoteInput {
  body: String
  header: String!
}

input NotificationDataInput {
  """
  The default `secondaryText` for user notifications that are created whenever a message is added to the conversation.
  """
  secondaryText: [String!]
}

type NotificationType {
  created: DateTime!
  createdBy: User
  createdById: String
  createdByName: String
  id: Int!
  isRead: Boolean!
  link: String
  message: String!
  secondaryText: [String!]
  updated: DateTime!
  userId: String!
}

input NotificationsFilter {
  all: Boolean! = false
  isRead: Boolean! = false
}

"""
An Order.
"""
type Order {
  """
  The advertiser the order is being created for.
  """
  advertiser: Advertiser

  """
  The ID of the advertiser the order is being created for.
  """
  advertiserId: ID!

  """
  The user that is assigned to the order.
  """
  assignee: User

  """
  The ID of the user that is assigned to the order.
  """
  assigneeUserId: ID

  """
  The total budget of the order, calculated from the associated line items.
  """
  budget: Float!
    @deprecated(reason: "This is a legacy concept that has been deprecated by `retailBudget`")

  """
  The date-time the order was created.
  """
  created: DateTime!

  """
  The ID of the user that created the order.
  """
  createdByUserId: ID!

  """
  The date that this entity became an official order.
  """
  dateOfOrder: Date

  """
  The date that this order was created as a proposal.
  """
  dateOfProposal: Date

  """
  The actual end date of the order, calculated from the associated line items.
  """
  endDate: Date

  """
  The hierarchy ID for which the order is being created for.
  """
  hierarchyId: ID
    @deprecated(
      reason: "This is deprecated. The hierarchy is now determined via the hierarchy product"
    )
  id: ID!

  """
  The line items associated with this order.
  """
  lineItems: [LineItem!]!

  """
  The order name.
  """
  name: String!

  """
  Custom information specific to the order.
  """
  orderInfo: JSON

  """
  An optional email address that represents the external user that this order was created for.
  Set when the order was created for an external user that does not exist in our system.
  """
  ownerEmail: String

  """
  The proposed date to end the order.
  """
  proposedEndDate: Date

  """
  The proposed date to start the order.
  """
  proposedStartDate: Date

  """
  The requester User.
  """
  requester: User

  """
  The ID of the requesting user.
  """
  requesterUserId: ID

  """
  The retail budget of the order, calculated from the sum of retail budgets from `lineItems`
  """
  retailBudget: Float

  """
  The source of the order.
  """
  source: OrderSource!

  """
  The actual start date of the order, calculated from the associated line items.
  """
  startDate: Date

  """
  The state of the order.
  """
  state: OrderState!

  """
  The status of the order.
  """
  status: OrderStatus! @deprecated(reason: "Order status is no longer used for anything.")

  """
  The date-time the order was last updated.
  """
  updated: DateTime!
}

input OrderBy {
  direction: PrismaSortOrder!
  field: String!
}

input OrderDateFilters {
  """
  Refers to the date that the order became an order. Entries with a null value will never be returned.
  """
  dateOfOrder: [DateFilter]

  """
  Refers to the date that the order became a proposal. Entries with a null value will never be returned.
  """
  dateOfProposal: [DateFilter]

  """
  Refers to the date time that a line item ends.
  """
  ended: [DateFilter]

  """
  Refers to the date time that a line item starts.
  """
  started: [DateFilter]

  """
  Refers to the date time that a line item was last updated.
  """
  updated: [DateTimeFilter]
}

type OrderDetailAllocation {
  endDate: String!
  goalAmount: Float!
  goalSubtype: OrderDetailAllocationGoalSubtype!
  goalType: OrderDetailAllocationGoalType!
  id: Float!
  orderDetailId: Float!
  startDate: String!
}

enum OrderDetailAllocationGoalSubtype {
  MAKE_GOOD
  NONE
  PROMOTION
  RENEWAL
}

enum OrderDetailAllocationGoalType {
  BUDGET
  CLICK
  IMPRESSION
  VIEW
}

enum OrderDetailCategory {
  DISPLAY_NATIVE
  EMAIL
  GEOFENCING
  SEM
  SOCIAL
  TTD
  UNKNOWN
  VIDEO_YOUTUBE
}

input OrderDetailDateFilterParams {
  endDate: DateTime
  filterType: OrderDetailDateFilterType!
  rangeType: OrderDetailDateFilterRangeType!
  startDate: DateTime
}

enum OrderDetailDateFilterRangeType {
  CURRENTMONTH
  CUSTOM
  LASTMONTH
  MONTHTODATE
}

enum OrderDetailDateFilterType {
  DATERECEIVED
  ENDDATE
  LIVEDURING
  STARTDATE
}

type OrderDetailError {
  invalidValue: Boolean
  message: String
  propertyPath: String
}

type OrderDetailPace {
  averageDailySpend: CurrencyDTO
  clickPace: Float
  clicks: Float
  cpc: CurrencyDTO
  cpv: CurrencyDTO
  ctr: Float
  dailyImpressionsCap: Float
  daysLeft: Float
  goalDailyBudget: CurrencyDTO
  impressionPace: Float
  impressions: Float
  orderDetailId: Int!
  orderedAdSpend: CurrencyDTO
  orderedClicks: Float
  orderedImpressions: Float
  orderedViews: Float
  projectedSpend: CurrencyDTO
  projectedSpendDelta: CurrencyDTO
  spendPace: Float
  totalSpend: CurrencyDTO
  viewPace: Float
  viewRate: Float
  views: Float
}

"""
Possible statuses for a order or order detail
"""
enum OrderDetailStatusEnum {
  CANCELED
  COMPLETE
  DRAFT
  LIVE
  NEW
  PAUSED
  PENDING
  SOLD
}

type OrderDetailTargeting {
  behavioral: BasicTargeting
  content: BasicTargeting
  demographic: BasicTargeting
  geo: GeoTargeting
}

type OrderDetailType {
  activeRateId: ID
  advertiserLocationIds: [Int!]!
  advertiserLocations: [Location!]!
  advertisingProduct: AdvertisingProduct
  allocations: [OrderDetailAllocation!]
  approvedBy: String
  assignee: User
  assigneeUserId: String
  budget: Float!
  campaigns: [PlatformCampaign!]!
  category: OrderDetailCategory
  created: DateTime!
  endDate: DateTime!
  flags: [String!]!
  followerUserIds: [String!]!
  followers: [User!]!
  hierarchyProduct: HierarchyProduct
  hierarchyProductId: ID
  id: Float!
  messageConversation: ConversationType
  messageConversationId: Float
  messageConversationUpdated: DateTime
  mongoId: String!
  name: String!
  notesConversation: ConversationType
  notesConversationId: Float
  order: OrderType!
  orderDetailPace(endDate: DateTime, startDate: DateTime): OrderDetailPace
  orderId: Float!
  product: Product
  productId: ID
  productInfo: JSONObject
  productKey: String
  productListing: AdvertiserProductListing
  rateCard: RateCard
  rateCardId: Int
  requester: User
  requesterUserId: String!
  startDate: DateTime!
  status: OrderDetailStatusEnum!
  targeting: OrderDetailTargeting
  updated: DateTime!
  zendeskId: String
  zendeskInfo: String
  zendeskLink: String
}

type OrderDetailValidation {
  errors: [OrderDetailError!]
  id: String!
}

type OrderDetailValidationResponse {
  orderInsertionDetails: [OrderDetailValidation!]
  orderInsertionDetailsSem: [OrderDetailValidation!]
  orderInsertionDetailsYouTube: [OrderDetailValidation!]
}

type OrderDetailsResponse implements PaginatedResponse {
  pageNumber: Int!
  pageSize: Int!
  results: [OrderDetailType!]
  totalCount: Int
  totalPages: Int
}

"""
Possible Order Detail Search sort directions
"""
enum OrderDetailsSearchSortDirection {
  ASC
  DESC
}

"""
Possible Order Detail Search sort fields
"""
enum OrderDetailsSearchSortFields {
  BUDGET
  DATE_OF_ORDER
  DATE_OF_PROPOSAL
  END_DATE
  FLAGS
  MESSAGE_CONVERSATION_UPDATED
  MESSAGE_CONVERSATION_UPDATED_NULLS
  NAME
  PURCHASE_DATE
  RETAIL_BUDGET
  START_DATE
  STATUS
}

"""
Possible directions for sorting Orders search
"""
enum OrderSearchSortDirection {
  ASC
  DESC
}

"""
Possible fields for sorting Orders search
"""
enum OrderSearchSortFields {
  DATE_OF_ORDER
  DATE_OF_PROPOSAL
  END_DATE
  NAME
  PURCHASE_DATE
  RETAIL_BUDGET
  START_DATE
}

"""
Fields that an `Order` can be sorted by.
"""
enum OrderSortableField {
  """
  Sort by the date the order was ordered `order.dateOfOrder`.
  """
  DATE_OF_ORDER

  """
  Sort by the date the order was proposed `order.dateOfProposal`.
  """
  DATE_OF_PROPOSAL
  END_DATE
  NAME
  PURCHASE_DATE

  """
  Sort by the allocated retail budget of the order `order.retailBudget`
  """
  RETAIL_BUDGET
  START_DATE
}

enum OrderSource {
  EXTERNAL
  LEGACY
  ORDER_MANAGEMENT
  PROPOSAL
}

enum OrderSourceEnum {
  EXTERNAL
  LEGACY
  ORDER_MANAGEMENT
  PROPOSAL
}

enum OrderState {
  MANAGED
  PROPOSED
}

enum OrderStatus {
  ARCHIVED
  CANCELED
  COMPLETE
  DRAFT
  LIVE
  NEW
  PAUSED
  PENDING
  SOLD
}

enum OrderStatusEnum {
  ARCHIVED
  CANCELED
  COMPLETE
  DRAFT
  LIVE
  NEW
  PAUSED
  PENDING
  SOLD
}

type OrderType {
  advertiser: Advertiser
  advertiserId: String!
  assignee: User
  assigneeUserId: String
  budget: Float!
  created: DateTime!
  dateOfOrder: String
  endDate: DateTime
  id: Float!
  name: String!
  orderDetails: [OrderDetailType!]!
  proposedEndDate: DateTime
  proposedStartDate: DateTime
  requesterUserId: String!
  requestor: User
  source: OrderSourceEnum!
  startDate: DateTime
  status: OrderStatusEnum!
  updated: DateTime!
}

"""
Ways in which `orders` query results can be filtered.
"""
input OrdersFilterInput {
  """
  Select orders associated with any of the specified advertisers.
  """
  advertiserIds: [ID!]

  """
  Offers date properties which can be filtered on.
  """
  dates: OrderDateFilters

  """
  When `true`, select orders where `dateOfOrder != null`.

  When `false`, select orders where `dateOfOrder == null`.
  """
  hasDateOfOrder: Boolean

  """
  Select orders associated with any of the specified hierarchies.
  An order is _associated_ with a hierarchy if the order's advertiser belongs to the hierarchy.
  """
  hierarchyIds: [ID!]

  """
  Select orders that have line items with the specified status.
  """
  lineItemStatus: LineItemStatus

  """
  filter by `retailBudget` less than or equal to this value
  """
  maxRetailBudget: Float

  """
  filter by `retailBudget` greater than or equal to this value
  """
  minRetailBudget: Float

  """
  Select orders with the specified name. Will match any name that contains the provided value.
  """
  name: String

  """
  Select orders with the specified ids.
  """
  orderIds: [ID!]

  """
  Select orders with the specified owner email.
  """
  ownerEmail: String

  """
  Select orders requested by any of the specified users.
  """
  requesterUserIds: [ID!]

  """
  Select orders with the specified source.
  """
  source: OrderSource

  """
  Select orders with the specified state
  """
  state: OrderState

  """
  Select orders with the specified status.
  """
  status: OrderStatus
}

"""
Response type for `query orders`.
"""
type OrdersResponse {
  """
  The page information.
  """
  pageInfo: PageInfo

  """
  The page of results.
  """
  results: [Order!]!
}

"""
Ways in which `orders` query results can be sorted.
"""
input OrdersSortInput {
  """
  The sort direction. Defaults to ascending.
  """
  direction: SortDirection

  """
  The sort field
  """
  field: OrderSortableField!
}

"""
Pagination information.
"""
type PageInfo {
  """
  The page number
  """
  pageNumber: Int!

  """
  The page size
  """
  pageSize: Int!

  """
  The total count of results across all pages
  """
  totalCount: Int!

  """
  The total number of pages
  """
  totalPages: Int!
}

"""
Common input for paginated queries.
"""
input PageInput {
  """
  The page number
  """
  pageNumber: Int! = 1

  """
  The page size
  """
  pageSize: Int! = 25
}

input PageNumberPageSizePaginationArgs {
  pageNumber: Int! = 0
  pageSize: Int! = 25
}

interface PaginatedResponse {
  pageNumber: Int!
  pageSize: Int!
  totalCount: Int
  totalPages: Int
}

type PasswordValidationRules {
  maxLength: Float!
  minLength: Float!
  requireMixedCase: Float!
  requireNonAlpha: Float!
  requireNumber: Float!
}

input PatchOrderDetailInput {
  activeRateId: Int
  advertiserLocationIds: [Int!]
  allocations: [JSONObject!]
  assigneeUserId: String
  budget: Float
  endDate: DateTime
  flags: [String!]
  followerUserIds: [String!]
  id: Float!
  name: String
  productInfo: JSONObject
  requesterUserId: String
  startDate: DateTime
  status: OrderDetailStatusEnum
  targeting: JSONObject
}

input PatchOrderInput {
  assigneeUserId: String
  id: Float!
  name: String
  requesterUserId: String
}

"""
Describes a request for adgroup-level performance metrics.
"""
input PerformanceMetricsByAdGroupInput {
  """
  The adgroup to filter results by.
  """
  adGroupId: ID

  """
  The advertiser to filter results by.
  """
  advertiserId: ID!

  """
  Filter results by a specific product type
  """
  analyticsProductType: AnalyticsProductTypeIdentifier!

  """
  The campaign to filter results by.
  """
  campaignId: ID

  """
  The inclusive end date to fetch metrics from.
  """
  endDate: Date!

  """
  The resolution to group metrics by. If not provided the result will be the total/average over the entire date range.
  """
  resolution: IntervalResolution

  """
  The inclusive start date to fetch metrics from.
  """
  startDate: Date!
}

"""
Describes a request for ad-level performance metrics.
"""
input PerformanceMetricsByAdInput {
  """
  The adgroup to filter results by.
  """
  adGroupId: ID

  """
  The ad to filter results by.
  """
  adId: ID

  """
  The advertiser to filter results by.
  """
  advertiserId: ID!

  """
  Filter results by a specific product type
  """
  analyticsProductType: AnalyticsProductTypeIdentifier!

  """
  The campaign to filter results by.
  """
  campaignId: ID

  """
  The inclusive end date to fetch metrics from.
  """
  endDate: Date!

  """
  The resolution to group metrics by. If not provided the result will be the total/average over the entire date range.
  """
  resolution: IntervalResolution

  """
  The inclusive start date to fetch metrics from.
  """
  startDate: Date!
}

"""
Describes a request for advertiser-level performance metrics.
"""
input PerformanceMetricsByAdvertiserInput {
  """
  The advertiser to filter results by.
  """
  advertiserId: ID!

  """
  Filter results by how ad content is presented to users.
  """
  analyticsProductTypes: [AnalyticsProductTypeIdentifier!]!

  """
  The inclusive end date to fetch metrics from.
  """
  endDate: Date!

  """
  The resolution to group metrics by. If not provided the result will be the total/average over the entire date range.
  """
  resolution: IntervalResolution

  """
  The inclusive start date to fetch metrics from.
  """
  startDate: Date!
}

"""
Describes a request for campaign-level performance metrics.
"""
input PerformanceMetricsByCampaignInput {
  """
  The advertiser to filter results by.
  """
  advertiserId: ID!

  """
  Filter results by a specific product type
  """
  analyticsProductType: AnalyticsProductTypeIdentifier!

  """
  The campaign to filter results by.
  """
  campaignId: ID

  """
  The inclusive end date to fetch metrics from.
  """
  endDate: Date!

  """
  The resolution to group metrics by. If not provided the result will be the total/average over the entire date range.
  """
  resolution: IntervalResolution

  """
  The inclusive start date to fetch metrics from.
  """
  startDate: Date!
}

"""
Summarizes performance metrics for an advertiser/campaign/ad group.
"""
type PerformanceSummary {
  """
  The value for common metrics, like clicks, impressions, or conversions.
  """
  metric: CommonPerformanceMetric!

  """
  Compares performance between the current period and the previous period of the same duration.
  """
  pop: PeriodOverPeriodPerformanceMetric!
}

"""
Describes a request for a summary of performance metrics.
"""
input PerformanceSummaryInput {
  """
  The adgroup to filter results by.
  """
  adGroupId: ID

  """
  The advertiser to filter results by.
  """
  advertiserId: ID!

  """
  Filter results by how ad content is presented to users.
  """
  analyticsProductType: AnalyticsProductTypeIdentifier!

  """
  The campaign to filter results by.
  """
  campaignId: ID

  """
  The inclusive end date to fetch metrics from.
  """
  endDate: Date!

  """
  The inclusive start date to fetch metrics from.
  """
  startDate: Date!
}

"""
Compares engagement between the current period and the previous period of the same duration.
"""
type PeriodOverPeriodEngagementMetric {
  """
  The period-over-period metric for comments.
  """
  comments: PeriodOverPeriodMetric!

  """
  The period-over-period metric for engagements.
  """
  engagements: PeriodOverPeriodMetric!

  """
  The period-over-period metric for likes.
  """
  likes: PeriodOverPeriodMetric!

  """
  The period-over-period metric for link clicks.
  """
  linkClicks: PeriodOverPeriodMetric!

  """
  The period-over-period metric for reactions.
  """
  reactions: PeriodOverPeriodMetric!

  """
  The period-over-period metric for shares.
  """
  shares: PeriodOverPeriodMetric!

  """
  The period-over-period metric for views.
  """
  views: PeriodOverPeriodMetric!
}

"""
Compares a metric between the current period and the previous period of the same duration.
"""
type PeriodOverPeriodMetric {
  """
  The signed difference in value.
  """
  delta: Float!

  """
  The signed relative difference (e.g., Relative difference between 2.0 to 3.0 is +0.5, as opposed to percent
  difference, which would be +50.0%). If the value for the previous period is unknown or zero, then this field is
  null.
  """
  relativeDifference: Float
}

"""
Compares performance between the current period and the previous period of the same duration.
"""
type PeriodOverPeriodPerformanceMetric {
  """
  The period-over-period metric for clicks.
  """
  clicks: PeriodOverPeriodMetric!

  """
  The period-over-period metric for conversion rate (conversions / clicks).
  """
  conversionRate: PeriodOverPeriodMetric!

  """
  The period-over-period metric for conversions.
  """
  conversions: PeriodOverPeriodMetric!

  """
  The period-over-period metric for ad spend per click.
  """
  costPerClick: PeriodOverPeriodMetric!

  """
  The period-over-period metric for ad spend per conversion.
  """
  costPerConversion: PeriodOverPeriodMetric!

  """
  The period-over-period metric for click through rate (clicks / impressions).
  """
  ctr: PeriodOverPeriodMetric!

  """
  The period-over-period metric for impressions.
  """
  impressions: PeriodOverPeriodMetric!

  """
  The period-over-period metric for spend.
  """
  spend: PeriodOverPeriodMetric!

  """
  The period-over-period metric for view rate (views / views started).
  """
  viewRate: PeriodOverPeriodMetric!

  """
  The period-over-period metric for video views.
  """
  views: PeriodOverPeriodMetric!

  """
  The period-over-period metric for number of times a video started playback.
  """
  viewsStarted: PeriodOverPeriodMetric!
}

"""
Third-party platforms.
"""
enum Platform {
  adc
  admanager
  bing
  ctm
  eltoro
  facebook
  ga
  google_ads
  hulu
  lead_me_media
  linkedin
  nxs
  organic
  pinterest
  reddit
  snapchat
  stackadapt
  tiktok
  tradedesk
  twitter
  vendasta
  waze
  yext
}

type PlatformAllocation {
  adMixCampaignId: Float!
  allocation: Float!
  behavioralTargets: [String!]!
  budget: Float
  contentTargets: [String!]!
  demographicTargets: [String!]!
  id: Float!
  platform: String!
}

type PlatformCampaign {
  adGroupPace(endDate: DateTime, startDate: DateTime): [AdGroup!]
  campaignPace(endDate: DateTime, startDate: DateTime): CampaignPace
  externalCampaignId: String!
  id: Float!
  name: String!
  orderDetail: OrderDetailType
  orderDetailId: Float!
  platform: PlatformEnum!
}

enum PlatformEnum {
  adc
  admanager
  bing
  ctm
  eltoro
  facebook
  ga
  google_ads
  hulu
  lead_me_media
  linkedin
  nxs
  organic
  pinterest
  reddit
  snapchat
  stackadapt
  tiktok
  tradedesk
  twitter
  vendasta
  waze
  yext
}

"""
Representation of Platform Ids that are not in our system
"""
type PlatformIdsNotInDapiResponse {
  """
  The platform ids not in our system
  """
  results: [ID!]!
}

"""
Integers that will have a value greater than 0.
"""
scalar PositiveInt

enum PrismaSortOrder {
  asc
  desc
}

type Product {
  billingType: String!
  deprecated: Boolean!
  description: String!
  id: Float!
  key: String
  name: String!
  productTeam: String!
  productType: String!
}

enum ProductCategory {
  ADVERTISING
  PRO_SERVE
  SOFTWARE
}

type ProductForm {
  appId: ID!
  created: DateTime!
  description: String
  id: ID!
  name: String!
  type: String!
  updated: DateTime!
}

enum ProductListingSortableField {
  NAME
}

"""
Possible products for targeting
"""
enum ProductNameEnum {
  display
  facebook
  youtube
}

type ProductRateResponse {
  billingType: String!
  budgetMinimum: Float
  description: String!
  key: String!
  monthMinimum: Float
  name: String!
  productId: Float!
  productTeam: String!
  productType: String!
  retailRate: Float
  retailRateDetails: RateDetail
  setupFee: Float
  wholesaleRate: Float
  wholesaleRateDetails: RateDetail
}

interface ProductResponse {
  category: ProductCategory!
  created: DateTime!
  description: String
  id: ID!
  legacyProductKeys: [String!]
  name: String!
  productForms: [ProductForm!]!
  type: ProductType!
  updated: DateTime!
}

enum ProductType {
  ADDON
  STANDARD
}

"""
Advertiser-level performance metrics for a given product type.
"""
type ProductTypeAdvertiserPerformanceMetric {
  """
  Describes how ad content is presented to users.
  """
  analyticsProductType: AnalyticsProductType!

  """
  Advertiser-level performance metrics.
  """
  metrics: [AdvertiserPerformanceMetric!]!
}

enum ProductTypeEnum {
  ADMIX
  AUDIO
  CANNABIS
  CHAT
  DFP
  DID
  DISPLAY
  EMAIL
  GAM
  GEOFENCING
  IP_TARGETING
  OTT
  SEARCH
  SEO
  SOCIAL
  SPECIALIZED
  VIDEO
  WEB_DEV
}

enum ProposalGoalType {
  BRANDING
  DIRECT_RESPONSE
  INFORMATIONAL
}

input ProposalLocationsInput {
  boundaryIds: [String!]
  dmaIds: [String!]
  placeNames: [String!]
  zipcodes: [String!]
}

type ProposalLocationsObject {
  boundaries: [MapboxBoundary!]!
  boundaryIds: [String!]!
  dmaIds: [String!]!
  dmas: [Dma!]!
  placeNames: [String!]!
  zipcodes: [String!]!
}

input ProposalOrderBy {
  columnName: ProposalSortFields!
  sortDirection: SortDirection!
}

input ProposalOrderInsertionDetail {
  adDescription: String
  adHeadline: String
  adText: String
  advertiserAddress: String
  advertiserWebsite: String
  assetFileIds: [Float!]
  budget: Float!
  callToAction: String
  campaignGoal: String
  campaignId: String!
  carbonCopyEmails: [String!]!
  clickThroughUrls: [String!]
  conversionUrls: [String!]
  disclaimer: String
  emailFrom: String
  emailSubject: String
  end: String!
  facebookPageUrl: String
  hasDataRefresh: Boolean
  hasDomainVerification: Boolean
  hasFootTrafficReport: Boolean
  hasMobileOptimization: Boolean
  isUsingTrackingPixel: Boolean
  longDescription: String
  longTitle: String
  name: String!
  note: String!
  product: String!
  shortDescription: String
  shortTitle: String
  sponsorName: String
  start: String!
  type: CampaignTypes!
}

input ProposalOrderInsertionDetailSem {
  adDescription: String
  adHeadline: String
  adText: String
  advertiserAddress: String
  advertiserWebsite: String
  assetFileIds: [Float!]
  budget: Float!
  callToAction: String
  campaignFocus: [String!]
  campaignGoal: String
  campaignId: String!
  carbonCopyEmails: [String!]!
  clickThroughUrls: [String!]
  conversionUrls: [String!]
  disclaimer: String
  emailFrom: String
  emailSubject: String
  end: String!
  facebookPageUrl: String
  formLocationUrls: [String!]
  googleMyBusinessEmailAddress: String
  hasDataRefresh: Boolean
  hasDomainVerification: Boolean
  hasFootTrafficReport: Boolean
  hasFormFills: Boolean
  hasLocationExtensions: Boolean
  hasMobileOptimization: Boolean
  hasOtherTracking: Boolean
  hasPageViews: Boolean
  hasPhoneCalls: Boolean
  isUsingTrackingPixel: Boolean
  longDescription: String
  longTitle: String
  name: String!
  note: String!
  otherCampaignFocusDescription: String
  otherTrackingNotes: String
  pageViewUrls: [String!]
  product: String!
  shortDescription: String
  shortTitle: String
  sponsorName: String
  start: String!
  suggestedNegativeKeywords: String
  trackingPhoneNumbers: [String!]
  type: CampaignTypes!
}

input ProposalOrderInsertionDetailYouTube {
  adDescription: String
  adHeadline: String
  adText: String
  advertiserAddress: String
  advertiserWebsite: String
  assetFileIds: [Float!]
  budget: Float!
  callToAction: String
  campaignGoal: String
  campaignId: String!
  carbonCopyEmails: [String!]!
  clickThroughUrls: [String!]
  conversionUrls: [String!]
  disclaimer: String
  emailFrom: String
  emailSubject: String
  end: String!
  facebookPageUrl: String
  hasDataRefresh: Boolean
  hasDomainVerification: Boolean
  hasFootTrafficReport: Boolean
  hasMobileOptimization: Boolean
  isUsingTrackingPixel: Boolean
  longDescription: String
  longTitle: String
  name: String!
  note: String!
  product: String!
  shortDescription: String
  shortTitle: String
  sponsorName: String
  start: String!
  type: CampaignTypes!
  videoUrls: [String!]
}

"""
Sort column mapper
"""
enum ProposalSortFields {
  BUDGET
  CREATED
  END_DATE
  NAME
  START_DATE
  STATUS
}

"""
Possible statuses for a proposal
"""
enum ProposalStatus {
  ARCHIVED
  DRAFT
  READY_FOR_SALE
  SOLD
  UNDER_REVIEW
}

type ProposalType {
  adMixCampaigns: [AdMixCampaign!]!
  advertiser: Advertiser
  advertiserId: Float!
  budget: Float!
  consolidatedCampaigns: [ShallowCampaign!]
  created: DateTime!
  createdBy: User!
  createdById: String!
  end: DateTime!
  externalId: String
  goal: ProposalGoalType!
  hierarchyLogoUri: String
  id: Int!
  industry: String!
  keywords: [String!]!
  locations: [String!]! @deprecated(reason: "'locationsObject' is more explicit")
  locationsObject: ProposalLocationsObject!
  manualCustomCampaigns: [ManualCustomCampaign!]!
  manualDisplayCampaigns: [ManualDisplayCampaign!]!
  manualEmailCampaigns: [ManualEmailCampaign!]!
  manualGeofencingCampaigns: [ManualGeofencingCampaign!]!
  manualSEMCampaigns: [ManualSEMCampaign!]!
  manualSEOCampaigns: [ManualSEOCampaign!]!
  manualSocialMediaCampaigns: [ManualSocialMediaCampaign!]!
  manualSpecializedCampaigns: [ManualSpecializedCampaign!]!
  manualStreamingAudioCampaigns: [ManualStreamingAudioCampaign!]!
  manualVideoCampaigns: [ManualVideoCampaign!]!
  microIndustries: [String!]!
  name: String!
  orderId: Float
  recommendationCampaignType: RecommendationCampaignType
  requestor: User
  requestorId: String!
  start: DateTime!
  status: ProposalStatus!
  type: String
  updated: DateTime!
  website: String!
  zendeskId: String
}

type ProserveProduct implements ProductResponse {
  category: ProductCategory!
  created: DateTime!
  description: String
  id: ID!
  legacyProductKeys: [String!]
  name: String!
  productForms: [ProductForm!]!
  type: ProductType!
  updated: DateTime!
}

enum PublisherEnum {
  AUDIENCE_NETWORK
  FACEBOOK
  INSTAGRAM
  MESSENGER
  UNKNOWN
  UNRECOGNIZED
}

type PublisherPerformanceMetric {
  interval: AnalyticsInterval!
  value: PublisherPerformanceValue!
}

type PublisherPerformanceValue {
  clicks: Float!
  comments: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  engagements: Float!
  impressions: Float!
  likes: Float!
  publisher: PublisherEnum!
  reactions: Float!
  shares: Float!
  spend: CurrencyDTO
  viewRate: Float!
  views: Float!
}

type Query {
  _errorCodes: ErrorCodes
  additionalReports(advertiserId: Float!): [AdditionalReport!]!
  advertiser(id: Float!): Advertiser
  advertiserLogoUri(advertiserId: Float!): String
  advertiserPermittedIds: [Float!]

  """
  Find a product listing by advertiser and product.
  """
  advertiserProductListing(
    """
    The ID of the advertiser.
    """
    advertiserId: ID!

    """
    The ID of the product.
    """
    productId: ID!
  ): AdvertiserProductListing

  """
  Search product listings for a specific advertiser.
  """
  advertiserProductListings(
    """
    Filterable criteria to apply to the results.
    """
    filter: AdvertiserProductListingsFilterInput!

    """
    Paginate the results by the given criteria.
    """
    page: PageInput = { pageNumber: 1, pageSize: 25 }

    """
    Sort the results by the given input.
    """
    sort: [AdvertiserProductListingsSortInput!] = [{ direction: ASC, field: NAME }]
  ): AdvertiserProductListingsResponse!
  advertisers(
    hierarchyId: Float
    hierarchyMongoId: String
    ids: [Float!]
    includeChildHierarchies: Boolean = false
    limit: Int! = 20
    mongoIds: [String!]
    name: String
    offset: Int! = 0
  ): [Advertiser!]!

  """
  Find an Advertising Product.
  """
  advertisingProduct(
    """
    The ID of the Advertising Product.
    """
    id: ID!
  ): AdvertisingProduct!

  """
  Return a list of Advertising Product Classes.
  """
  advertisingProductClasses(
    """
    The ID of the Hierarchy to filter Advertising Product Classes by.
    When specified, only the Advertising Product Classes that the Hierarchy has enabled will be returned.
    """
    hierarchyId: ID
  ): [String!]!

  """
  Return a list of Advertising Product Lines.
  """
  advertisingProductLines(
    """
    The ID of the Hierarchy to filter Advertising Product Lines by.
    When specified, only the Advertising Product Lines that the Hierarchy has enabled will be returned.
    """
    hierarchyId: ID
  ): [String!]!

  """
  Return a list of Advertising Product Types.
  """
  advertisingProductTypes(
    """
    The ID of the Hierarchy to filter Advertising Product Types by
    When specified, only the Advertising Product Types that the Hierarchy has enabled will be returned.
    """
    hierarchyId: ID
  ): [String!]!

  """
  Look up advertising products.
  """
  advertisingProducts(
    """
    Filter the results by the given criteria.
    """
    filter: AdvertisingProductsFilterInput

    """
    Paginate the results by the given criteria.
    """
    page: PageInput = { pageNumber: 1, pageSize: 25 }

    """
    Sort the results by the given criteria.
    """
    sort: [AdvertisingProductsSortInput!] = [{ direction: ASC, field: NAME }]
  ): AdvertisingProductsResponse!
  analyticsAdvertiser(id: Float!): Advertiser!
  audienceMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [TtdAudienceResponse!]!

  """
  Find products for a given hierarchy that are available.
  Available products are those where the parent hierarchy has the same product enabled.
  Available products can be enabled or disabled without error.
  """
  availableHierarchyProducts(hierarchyId: ID!): HierarchyProducts!
  behavioralTTDTargeting(
    limit: Int! = 20
    offset: Int! = 0
    value: String
    values: [String!]
  ): BehavioralTTDTarget!

  """
  Find a campaign by id.
  """
  campaign(
    """
    The ID of the campaign.
    """
    id: ID!
  ): LineItemCampaign!

  """
  Search for campaigns.
  """
  campaigns(
    """
    Filter the results by the given criteria.
    """
    filter: CampaignsFilterInput

    """
    Paginate the results by the given criteria.
    """
    page: PageInput
  ): LineItemCampaignsResponse!
  censusData: CensusDataType!
  contentTTDTargeting(
    limit: Int! = 20
    offset: Int! = 0
    value: String
    values: [String!]
  ): ContentTTDTarget!
  conversation(input: ConversationInput!): ConversationType
  creative(id: Float!): Creative
  currentUser: User
  demographicTTDTargeting(
    limit: Int! = 20
    offset: Int! = 0
    value: String
    values: [String!]
  ): DemographicTTDTarget!
  displayAdGroupGeoMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
    zip: Boolean
  ): [DisplayGeoMetricsResponse!]!
  displayAdGroupPerformanceMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): DisplayAdGroupPerformanceMetricsResponse!
  displayAdGroupPerformanceSummary(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): DisplayAdGroupPerformanceSummaryResponse!
  displayAdvertiserGeoMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
    zip: Boolean
  ): [DisplayGeoMetricsResponse!]!
  displayAdvertiserPerformanceMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): DisplayAdvertiserPerformanceMetricsResponse!
  displayAdvertiserPerformanceSummary(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): DisplayAdvertiserPerformanceSummaryResponse!
  displayBrandMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [DisplayBrandMetricsResponse!]!
  displayCampaignGeoMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
    zip: Boolean
  ): [DisplayGeoMetricsResponse!]!
  displayCampaignPerformanceMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): DisplayCampaignPerformanceMetricsResponse!
  displayCampaignPerformanceSummary(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): DisplayCampaignPerformanceSummaryResponse!
  displayConversionMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [DisplayConversionsResponse!]!
  displayCreativeMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [DisplayCreativeMetricsResponse!]!
  displayDeviceTypeMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [DisplayDeviceTypeMetricsResponse!]!
  displayFacebookTargeting(
    limit: Int! = 20
    offset: Int! = 0
    productName: ProductNameEnum!
    type: TypeEnum!
    value: String
    values: [String!]
  ): GdnFbTarget!
  displayFoldMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [FoldResponse!]!
  displayTimeOfDayMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    startDate: Date!
  ): [DisplayTimeOfDayMetricsResponse!]!
  dmaById(id: String!): Dma
  dmaSearch(pageNumber: Int, pageSize: Int, value: String): DmaResponse!
  dmasById(ids: [String!]!): [Dma!]!
  emailTargeting(
    limit: Int! = 20
    offset: Int! = 0
    type: EmailTypeEnum!
    value: String
    values: [String!]
  ): EmailTarget!

  """
  Get engagement metrics by ad group
  """
  engagementMetricsByAdGroup(input: EngagementMetricsByAdGroupInput!): [AdGroupEngagementMetric!]!

  """
  Get a summary of engagement metrics for an advertiser, campaign, and/or ad group.
  """
  engagementSummary(input: EngagementSummaryInput!): EngagementSummary
  exportAdvertisingProductsCsvJobStatus(jobId: Float!): AggregateExportJob!
  exportProductsCsvJobStatus(jobId: Float!): AggregateExportJob!
  exportUsersCsvJobStatus(jobId: Float!): AggregateExportJob!

  """
  Search External Ad Groups.
  """
  externalAdGroups(input: SearchExternalAdGroupsInput): ExternalAdGroups

  """
  Search External Advertisers.
  """
  externalAdvertisers(input: SearchExternalAdvertisersInput): ExternalAdvertisers

  """
  Unlike the "externalAdvertisers" query, which only searches for already-discovered advertisers, this query
  requests external advertisers directly from the third-party DSP, if possible. This is supported only for
  Tradedesk. Otherwise, we continue returning only already-discovered advertisers. USE WITH CAUTION! This should only
  be used in situations where results MUST include very recently created advertisers. Querying against the third-party
  DSP is expensive.
  """
  externalAdvertisersEager(input: SearchEagerExternalAdvertisersInput!): ExternalAdvertisers

  """
  Search External Campaigns.
  """
  externalCampaigns(input: SearchExternalCampaignsInput): ExternalCampaigns

  """
  Search Facebook Ad Group Audiences.
  """
  facebookAdGroupAudiences(input: SearchFacebookAdGroupAudiencesInput!): FacebookAdGroupAudiences
  facebookAdGroupPerformanceMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): FacebookAdGroupPerformanceMetricsResponse!
  facebookAdGroupPerformanceSummary(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): FacebookAdGroupPerformanceSummaryResponse!
  facebookAdvertiserPerformanceMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): FacebookAdvertiserPerformanceMetricsResponse!
  facebookAdvertiserPerformanceSummary(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): FacebookAdvertiserPerformanceSummaryResponse!
  facebookAudiences(
    adGroupId: String
    advertiserId: String!
    campaignId: String
  ): [FacebookAudienceValue!]!
  facebookCampaignPerformanceMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): FacebookCampaignPerformanceMetricsResponse!
  facebookCampaignPerformanceSummary(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): FacebookCampaignPerformanceSummaryResponse!
  facebookCreativeMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [FacebookCreativeMetricsResponse!]!
  facebookGeoMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [FacebookGeoMetricsResponse!]!

  """
  Get Facebook performance metrics by publisher.
  """
  facebookPerformanceMetricsByPublisher(
    input: FacebookPerformanceMetricsByPublisherInput!
  ): [FacebookPerformanceByPublisherMetricInterval!]!
  fbTargeting(
    limit: Int! = 20
    offset: Int! = 0
    type: TypeEnum!
    value: String
    values: [String!]
  ): FbTarget!

  """
  Gets a file
  """
  file(input: GetFileInput!): File!

  """
  Gets files
  """
  files(
    """
    Filter the results by the given input
    """
    filter: FilesFilterInput!

    """
    Paginate the results by the given input
    """
    page: PageInput = { pageNumber: 1, pageSize: 25 }
  ): FilesResponse!
  frequencyMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [FrequencyResponse!]!
  gdnAdGroupPerformanceMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): GdnAdGroupPerformanceMetricsResponse!
  gdnAdGroupPerformanceSummary(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): GdnAdGroupPerformanceSummaryResponse!
  gdnAdvertiserPerformanceMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): GdnAdvertiserPerformanceMetricsResponse!
  gdnAdvertiserPerformanceSummary(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): GdnAdvertiserPerformanceSummaryResponse!
  gdnAudienceMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [GoogleAudienceResponse!]!
  gdnCampaignPerformanceMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): GdnCampaignPerformanceMetricsResponse!
  gdnCampaignPerformanceSummary(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): GdnCampaignPerformanceSummaryResponse!
  gdnCreativeMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [GdnCreativeMetricsResponse!]!
  gdnDeviceTypeMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [GoogleDeviceTypeMetricsResponse!]!
  gdnGeoMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
    zip: Boolean
  ): [GdnGeoMetricsResponse!]!
  gdnTargeting(
    limit: Int! = 20
    offset: Int! = 0
    type: TypeEnum!
    value: String
    values: [String!]
  ): GdnTarget!
  gdnTimeOfDayMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    startDate: Date!
  ): [GoogleTimeOfDayMetricsResponse!]!

  """
  Get location geo metrics
  """
  geoMetrics(input: GeoMetricsInput!): [GeoMetric!]!
  geocodeSearch(
    layer: MapboxBoundaryLayer
    pageNumber: Int
    pageSize: Int
    value: String
  ): MapboxBoundaryResponse!
  geocodesByFeatureId(ids: [String!]!): MapboxBoundaryResponse!
  geocodesByLocation(locations: [LocationInput!]!): MapboxBoundaryResponse!
  geocodesByZipcode(zipcodes: [String!]!): MapboxBoundaryResponse!
  getConversation(id: Int!): ConversationType
  getFileDownload(fileId: Float!): File!
  getFiles(fileIds: [Int!]!): [File!]!
  getInsertionOrderValidation(
    orderInsertionDetails: [ProposalOrderInsertionDetail!]
    orderInsertionDetailsSem: [ProposalOrderInsertionDetailSem!]
    orderInsertionDetailsYouTube: [ProposalOrderInsertionDetailYouTube!]
  ): OrderDetailValidationResponse
  getJsonPreference(key: String!): JsonPreferenceType!
  getJsonPreferenceGroup(key: [String!]!): [JsonPreferenceGroupType!]!
  getJsonPreferences: [JsonPreferenceType!]!
  getLocalSeoUrl(advertiserId: Float!): String
  getOrder(id: Float!): OrderType
  getOrderDetail(id: Float!): OrderDetailType
  getOrderDetailsByOrderId(orderId: Float!): [OrderDetailType!]
  getOrderDetailsForReview(id: Float!): [OrderDetailType!]!
  getOrders(
    advertiserIds: [Int!]
    endDate: DateTime
    hasDateOfOrder: Boolean
    hierarchyIds: [Int!]
    name: String
    orderDetailStatus: OrderDetailStatusEnum
    orderIds: [Int!]
    orderStatus: OrderStatusEnum
    pageNumber: Int = 1
    pageSize: Int = 20
    requesterUserIds: [String!]
    sortBy: [SortOrdersData!]
    startDate: DateTime
  ): [OrderType!]
  getPlatformCampaign(id: Float!): PlatformCampaign
  getPlatforms: [PlatformEnum!]!
  getProductRates(
    advertiserId: Float
    effectiveDate: DateTime!
    hierarchyId: Float
    productIds: [Float!]!
  ): [ProductRateResponse!]!
  getProducts(productType: ProductTypeEnum): [Product!]!
  getProposal(id: Float!): ProposalType!
  getProposals(
    advertiserId: Float
    advertiserIds: [Int!]
    advertiserName: String
    filter: String
    hierarchyIds: [Int!]
    limit: Int! = 20
    maxBudget: Float
    minBudget: Float
    offset: Int! = 0
    orderBy: [ProposalOrderBy!]
    requestorId: String
    requestorIds: [String!]
    statuses: [ProposalStatus!]
  ): [ProposalType!]!
  getTradedeskForecast(
    days: Float!
    fullPaths: [String!]
    geoSearchData: [GeoData!]
    productKey: String
  ): ForecastResponse!
  getUserbyEmail(email: String!): User
  googleAdsAdGroupMetrics(
    adGroupId: String!
    advertiserId: String!
    campaignId: String!
    endDate: Date!
    startDate: Date!
  ): GoogleAdsAdGroupDTO
  googleAdsAdvertiserMetrics(
    advertiserId: String!
    endDate: Date!
    startDate: Date!
  ): GoogleAdsAdvertiserDTO
  googleAdsCampaignMetrics(
    advertiserId: String!
    campaignId: String!
    endDate: Date!
    startDate: Date!
  ): GoogleAdsCampaignDTO
  hierarchies(
    filter: String
    ids: [Float!]
    limit: Int! = 20
    mongoIds: [String!]
    offset: Int! = 0
    parentId: Float
    parentMongoId: String
  ): [Hierarchy!]!
  hierarchiesByEntityIds(input: HierarchiesByEntityIdsInput!): HierarchiesByEntityIdsResponse!
    @deprecated(reason: "No longer needed by Fusion Auth")
  hierarchiesById(
    filter: String
    ids: [Float!]
    limit: Int! = 20
    mongoIds: [String!]
    offset: Int! = 0
    parentId: Float
    parentMongoId: String
  ): Hierarchies!
  hierarchiesByName(
    filter: String
    ids: [Float!]
    limit: Int! = 20
    mongoIds: [String!]
    offset: Int! = 0
    parentId: Float
    parentMongoId: String
  ): Hierarchies!
  hierarchy(id: Float, mongoId: String): Hierarchy
  hierarchyChildIds(id: Float, mongoId: String): HierarchyChildIdsResponse!
  hierarchyParentIds(
    advertiserId: Float
    advertiserMongoId: String
    id: Float
    mongoId: String
  ): HierarchyParentIdsResponse!

  """
  Find a Hierarchy Product.
  """
  hierarchyProduct(
    """
    The ID of the Hierarchy Product.
    """
    id: ID!
  ): HierarchyProduct!

  """
  Find a hierarchy product config by hierarchy and product.
  """
  hierarchyProductConfig(
    """
    The ID of the hierarchy.
    """
    hierarchyId: ID!

    """
    The ID of the product.
    """
    productId: ID!
  ): HierarchyProductConfig

  """
  Look up hierarchy product configs.
  """
  hierarchyProductConfigs(
    """
    Filter the results by the given criteria.
    """
    filter: HierarchyProductConfigsFilterInput!

    """
    Paginate the results by the given criteria.
    """
    page: PageInput = { pageNumber: 1, pageSize: 25 }

    """
    Sort the results by the given criteria.
    """
    sort: [HierarchyProductConfigsSortInput!] = [{ direction: ASC, field: PRODUCT_NAME }]
  ): HierarchyProductConfigsResponse!

  """
  Search product listings for a specific hierarchy.
  """
  hierarchyProductListings(
    """
    Filter results by the given criteria.
    """
    filter: HierarchyProductListingsFilterInput!

    """
    Paginate the results by the given criteria.
    """
    page: PageInput = { pageNumber: 1, pageSize: 25 }

    """
    Sort the results by the given criteria.
    """
    sort: [HierarchyProductListingsSortInput!] = [{ direction: ASC, field: NAME }]
  ): HierarchyProductListingsResponse!
  hierarchyProductRates(hierarchyProductId: ID!): HierarchyProductRatesResponse!
    @deprecated(reason: "Use `HierarchyProduct { activeRateCard { rates } }` field instead.")
  hierarchyRatesByParentId(parentId: Float!): Hierarchies!

  """
  Finds a list if linked accounts in Improvado that meet the given criteria.
  """
  improvadoAccounts(filter: ImprovadoAccountsFilterInput!, page: PageInput): ImprovadoAccounts!

  """
  Runs our Improvado Connection Health Check. If all connections are healthy, we return true. Otherwise,
  if even one connection is Unhealthy we return false. Logs an error if any Improvado Connections are Unhealthy.
  """
  improvadoConnectionHealthCheck: Boolean!

  """
  Finds connected accounts in Improvado associated with a given hierarchy.
  """
  improvadoConnections(input: ImprovadoConnectionsInput!): [ImprovadoConnection!]!

  """
  Finds a list of Improvado subagencies.
  """
  improvadoSubagencies(
    filter: ImprovadoSubagenciesFilterInput
    page: PageInput
  ): ImprovadoSubagencies!

  """
  For each in a given list of Improvado account ids, get a mapping of the account id to a known Improvado subagency.

  Context: account ids can be associated with external advertiser ids. By connecting account ids to
  ImprovadoSubagencies, which have a hierarchy, we can associate external advertiser ids to hierarchies, which
  ultimately is useful to show only relevant advertisers to users that belong to only a single hierarchy.
  """
  improvadoSubagenciesByAccount(
    input: ImprovadoSubagenciesByAccountInput!
  ): [ImprovadoSubagencyAccountMapping!]!
  industriesByName(filter: String!): IndustriesResponse!
  jobStatus(jobId: Float!): AggregateExportJob!

  """
  Find a line item by id.
  """
  lineItem(
    """
    The ID of the line item.
    """
    id: ID!
  ): LineItem!

  """
  Search line item allocations
  """
  lineItemAllocations(
    """
    Filter the results by the given input
    """
    filter: LineItemAllocationsFilterInput

    """
    Paginate the results by the given input
    """
    page: PageInput
  ): LineItemAllocationsResponse!

  """
  Search line items.
  """
  lineItems(
    """
    Filter the results by the given criteria.
    """
    filter: LineItemsFilterInput

    """
    Paginate the results by the given criteria.
    """
    page: PageInput

    """
    Sort the results by the given criteria.
    """
    sort: [LineItemsSortInput!]
  ): LineItemsResponse!

  """
  Search Linked Advertisers.
  """
  linkedAdvertisers(input: SearchLinkedAdvertisersInput): LinkedAdvertisers

  """
  Find linked and unlinked campaigns by id.
  """
  linkedAndUnlinkedCampaigns(
    """
    Filter the results by the given criteria.
    """
    filter: LinkedAndUnlinkedCampaignFilterInput
  ): LinkedAndUnlinkedCampaignsResponse!
  location(id: Float!): Location!
  locationsById(ids: [Int!]!): [Location!]!
  metaPublisherPerformance(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [PublisherPerformanceMetric!]!
  microIndustriesByName(filter: String!, industryName: String): MicroIndustries!
  nativeTargeting(
    limit: Int! = 20
    offset: Int! = 0
    value: String
    values: [String!]
  ): NativeTarget!
  notifications(
    filter: NotificationsFilter
    orderBy: [OrderBy!] = [{ direction: asc, field: "created" }]
    page: PageNumberPageSizePaginationArgs
  ): [NotificationType!]

  """
  Find an order by id
  """
  order(
    """
    The ID of the order
    """
    id: ID!
  ): Order!

  """
  Search orders.
  """
  orders(
    """
    Filter the results by the given criteria.
    """
    filter: OrdersFilterInput

    """
    Paginate the results by the given criteria.
    """
    page: PageInput

    """
    Sort the results by the given criteria.
    If `null`, defaults to sorting by startDate and id.
    """
    sort: [OrdersSortInput!]
  ): OrdersResponse!
  passwordValidationRules: PasswordValidationRules

  """
  Get performance metrics for an advertiser grouped by ad.
  """
  performanceMetricsByAd(input: PerformanceMetricsByAdInput!): [AdPerformanceMetric!]!

  """
  Get performance metrics for an advertiser grouped by adgroup.
  """
  performanceMetricsByAdGroup(
    input: PerformanceMetricsByAdGroupInput!
  ): [AdGroupPerformanceMetric!]!

  """
  Get performance metrics for an advertiser.
  """
  performanceMetricsByAdvertiser(
    input: PerformanceMetricsByAdvertiserInput!
  ): [AdvertiserPerformanceMetric!]!

  """
  Get performance metrics for an advertiser grouped by campaign.
  """
  performanceMetricsByCampaign(
    input: PerformanceMetricsByCampaignInput!
  ): [CampaignPerformanceMetric!]!

  """
  Get performance metrics grouped by product type and then by advertiser.
  """
  performanceMetricsByProductTypeAndAdvertiser(
    input: PerformanceMetricsByAdvertiserInput!
  ): [ProductTypeAdvertiserPerformanceMetric!]!

  """
  Get a summary of performance metrics for an advertiser, campaign, and/or ad group.
  """
  performanceSummary(input: PerformanceSummaryInput!): PerformanceSummary

  """
  Query for platform ids that do not exist in dapi-files
  """
  platformIdsNotInDapi(platform: Platform!, platformIds: [ID!]!): PlatformIdsNotInDapiResponse!

  """
  Valid Platforms
  """
  platforms: [Platform!]!

  """
  Return a list of all Product Forms.
  """
  productForms: [ProductForm!]!

  """
  Get a rate by its id
  """
  rate(id: ID!): Rate!

  """
  Get a rate card by its id
  """
  rateCard(id: ID!): RateCard!
  rateCards(advertiserId: Int, hierarchyId: Int): RateCards!

  """
  Get the rates associated with a given rate card id
  """
  rates(rateCardId: ID!): Rates!
  recencyAdGroupMetrics(
    adGroupId: String!
    advertiserId: String!
    campaignId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [DetailedRecencyResponse!]!
  recencyAdvertiserMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [RecencyResponse!]!
  recencyCampaignMetrics(
    advertiserId: String!
    campaignId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [DetailedRecencyResponse!]!
  rollupAdvertiserPerformanceMetrics(
    advertiserId: String!
    endDate: Date!
    productTypes: [ApiAnalyticsMediaType!]
    resolution: AnalyticsResolution!
    startDate: Date!
  ): RollupAdvertiserPerformanceMetricsResponse!
  rollupAdvertiserPerformanceSummary(
    advertiserId: String!
    endDate: Date!
    productTypes: [ApiAnalyticsMediaType!]
    startDate: Date!
  ): RollupAdvertiserPerformanceSummaryResponse!
  searchAdGroupPerformanceMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): SearchAdGroupPerformanceMetricsResponse!
  searchAdGroupPerformanceSummary(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): SearchAdGroupPerformanceSummaryResponse!
  searchAdvertiserPerformanceMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): SearchAdvertiserPerformanceMetricsResponse!
  searchAdvertiserPerformanceSummary(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): SearchAdvertiserPerformanceSummaryResponse!

  """
  Search Advertising Products.
  """
  searchAdvertisingProducts(request: SearchAdvertiserProductRequest!): AdvertisingProductsResponse!
    @deprecated(reason: "Use `advertisingProducts` query instead.")
  searchCampaignPerformanceMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): SearchCampaignPerformanceMetricsResponse!
  searchCampaignPerformanceSummary(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): SearchCampaignPerformanceSummaryResponse!
  searchConversionMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [SearchConversionsResponse!]!
  searchDeviceTypeMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [SearchDeviceTypeMetricsResponse!]!
  searchGeoMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
    zip: Boolean
  ): [SearchGeoMetricsResponse!]!

  """
  Search Hierarchy Products.
  """
  searchHierarchyProducts(request: SearchHierarchyProductRequest!): HierarchyProductPageResponse!
  searchKeywordMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [SearchKeywordsResponse!]!
  searchLocations(
    advertiserId: Int!
    pageNumber: Int = 1
    pageSize: Int = 20
    searchTerm: String
  ): SearchLocationsResponse!
  searchOrderDetails(
    advertiserIds: [Int!]
    assigneeUserIds: [String!]
    dateFilter: OrderDetailDateFilterParams
    endDate: DateTime
    flags: [String!]
    followerUserIds: [String!]
    hierarchyId: Float
    ids: [Int!]
    maxBudget: Float
    minBudget: Float
    name: String
    orderIds: [Int!]
    pageNumber: Int = 1
    pageSize: Int = 20
    productIds: [Float!]
    purchaseDate: DateTime
    requestorUserIds: [String!]
    sortBy: [SortOrderDetailsData!]
    startDate: DateTime
    statuses: [SearchOrderDetailStatusEnum!]
  ): OrderDetailsResponse!
  searchPlatformCampaigns(
    advertiserId: Float!

    """
    Must be either `GoogleAds` or `Yext`
    """
    platformName: PlatformEnum!
    searchTerm: String
  ): LinkedAndUnlinkedCampaigns!
  searchTimeOfDayMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    startDate: Date!
  ): [GoogleTimeOfDayMetricsResponse!]!

  """
  Get supported location types (i.e., geo granularities) for a given product
  """
  supportedLocationTypes(input: AnalyticsProductTypeIdentifier!): [AnalyticsLocationType!]!

  """
  Search Tradedesk Campaign Conversion Tracking Label Sets.
  """
  tradedeskCampaignConversionTrackingLabelSets(
    input: SearchTradedeskCampaignConversionTrackingLabelSetsInput!
  ): TradedeskCampaignConversionTrackingLabelSets
  unreadNotificationCount: Int
  user(id: String!): User
  users(
    filter: String
    ids: [String!]
    limit: Int! = 20
    offset: Int! = 0
    scope: UserScope
    sort: [UserSort!]
    types: [UserType!]
  ): [User!]!
  validateConversationToken(input: ValidateConversationTokenInput!): Boolean!

  """
  Validates that an Order is valid prior to creating it
  """
  validateOrder(
    """
    The OrderInput that represents the state of the order prior to creating it
    """
    input: dapi_CreateOrderInput!
  ): ValidOrder!
  validatePassword(password: String!): ValidatePasswordResponse!
  videoAdGroupGeoMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
    zip: Boolean
  ): [VideoGeoMetricsResponse!]!
  videoAdGroupPerformanceMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): VideoAdGroupPerformanceMetricsResponse!
  videoAdGroupPerformanceSummary(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): VideoAdGroupPerformanceSummaryResponse!
  videoAdvertiserGeoMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
    zip: Boolean
  ): [VideoGeoMetricsResponse!]!
  videoAdvertiserPerformanceMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): VideoAdvertiserPerformanceMetricsResponse!
  videoAdvertiserPerformanceSummary(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): VideoAdvertiserPerformanceSummaryResponse!
  videoBrandMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [VideoBrandMetricsResponse!]!
  videoCampaignGeoMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
    zip: Boolean
  ): [VideoGeoMetricsResponse!]!
  videoCampaignPerformanceMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): VideoCampaignPerformanceMetricsResponse!
  videoCampaignPerformanceSummary(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): VideoCampaignPerformanceSummaryResponse!
  videoConversionMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [VideoConversionsResponse!]!
  videoCreativeMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [VideoCreativeMetricsResponse!]!
  videoDeviceTypeMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [VideoDeviceTypeMetricsResponse!]!
  videoFoldMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [FoldResponse!]!
  videoTimeOfDayMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    startDate: Date!
  ): [VideoTimeOfDayMetricsResponse!]!
  willProposalHaveRecommendedCampaigns(
    advertiserId: Float!
    budget: Float!
    end: DateTime!
    goal: ProposalGoalType!
    recommendationCampaignType: RecommendationCampaignType!
    start: DateTime!
  ): Boolean!
  youtubeAdGroupPerformanceMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): YoutubeAdGroupPerformanceMetricsResponse!
  youtubeAdGroupPerformanceSummary(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): YoutubeAdGroupPerformanceSummaryResponse!
  youtubeAdvertiserPerformanceMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): YoutubeAdvertiserPerformanceMetricsResponse!
  youtubeAdvertiserPerformanceSummary(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): YoutubeAdvertiserPerformanceSummaryResponse!
  youtubeAudienceMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [GoogleAudienceResponse!]!
  youtubeCampaignPerformanceMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): YoutubeCampaignPerformanceMetricsResponse!
  youtubeCampaignPerformanceSummary(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): YoutubeCampaignPerformanceSummaryResponse!
  youtubeCreativeMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [YoutubeCreativeMetricsResponse!]!
  youtubeDeviceTypeMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): [GoogleDeviceTypeMetricsResponse!]!
  youtubeGeoMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
    zip: Boolean
  ): [YoutubeGeoMetricsResponse!]!
}

type Range {
  max: Float!
  min: Float!
}

input RangeInput {
  max: Float!
  min: Float!
}

"""
A billing rate.
"""
type Rate {
  """
  The billing type of the rate.
  """
  billingType: BillingType!

  """
  The date that this rate was created.
  """
  created: DateTime!

  """
  A human-friendly description for this rate.
  """
  description: String

  """
  The flight minimum days amount required to spend for this rate.
  """
  flightMinimum: Float!

  """
  The ID of the rate.
  """
  id: ID!

  """
  The minimum amount required to spend for this rate.
  """
  minSpendAmount: Float
    @deprecated(
      reason: "Use monthlyBudgetMinimum, monthlyImpressionMinimum, or flightMinimum instead"
    )

  """
  The monthly budget minimum amount required to spend for this rate.
  """
  monthlyBudgetMinimum: Float!

  """
  The monthly impression minimum amount required to spend for this rate.
  """
  monthlyImpressionMinimum: Float!

  """
  The rate card that owns this rate.
  """
  rateCard: RateCard!

  """
  The retail amount for this rate.
  """
  retailAmount: Float!

  """
  The date that this rate was updated.
  """
  updated: DateTime!

  """
  The wholesale amount for this rate.
  """
  wholesaleAmount: Float!
}

"""
A rate card contains a list of rates.
"""
type RateCard {
  """
  The date and time when the rate card was created.
  """
  created: DateTime!

  """
  The rate card id
  """
  id: ID!

  """
  The name of the rate card.
  """
  name: String!

  """
  A list of rates associated with the rate card.
  """
  rates: [Rate!]!

  """
  The date and time when the rate card was last updated.
  """
  updated: DateTime!
}

type RateCards {
  rateCardIds: [Float!]!
}

type RateDetail {
  amount: Float
  effectiveDate: String
  id: Float
  inherited: Boolean
  rateCardId: Float
  rateType: RateTypeEnum
}

"""
The possible kinds of rates you can have
"""
enum RateTypeEnum {
  BUDGET_MINIMUM
  MONTH_MINIMUM
  RETAIL
  SETUP_FEE
  WHOLESALE
}

type Rates {
  """
  The rates
  """
  rates: [Rate!]!
}

type RecencyConversionValue implements BaseConversionValue {
  conversions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  trackingLabelName: String
  trackingLabelSequence: Float!
}

type RecencyGroup {
  maxDays: Float
  minDays: Float
}

type RecencyResponse {
  interval: AnalyticsInterval!
  value: RecencyValue!
}

type RecencyValue {
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  recencyGroup: RecencyGroup
}

enum RecommendationCampaignType {
  DISPLAY
  DISPLAY_AND_VIDEO
  VIDEO
}

"""
Input for `resetHierarchyProductConfig`.

When a parameter is `true`, that field will be reset so that its value is inherited from the parent hierarchy.
"""
input ResetHierarchyProductConfigInput {
  """
  When `true`, inherit `customName` from the parent hierarchy.
  """
  customName: Boolean = false

  """
  When `true`, inherit `enabledAdvertiserIds` from the parent hierarchy.
  """
  enabledAdvertiserIds: Boolean = false

  """
  When `true`, inherit `enabledForAllAdvertisers` from the parent hierarchy.
  """
  enabledForAllAdvertisers: Boolean = false

  """
  When `true`, inherit `goalTypes` from the parent hierarchy.
  """
  goalTypes: Boolean = false

  """
  The ID of the hierarchy being configured.
  """
  hierarchyId: ID!

  """
  The ID of the product being configured.
  """
  productId: ID!

  """
  When `true`, inherit `rateCardId` from the parent hierarchy.
  """
  rateCardId: Boolean = false

  """
  When `true`, inherit `status` from the parent hierarchy.
  """
  status: Boolean = false
}

type RollupAdvertiserPerformanceMetric {
  interval: AnalyticsInterval!
  value: RollupAdvertiserPerformanceValue!
}

type RollupAdvertiserPerformanceMetricsResponse {
  metrics: [RollupAdvertiserPerformanceMetric!]!
}

type RollupAdvertiserPerformanceSummaryResponse {
  metrics: [RollupAdvertiserPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    endDate: Date!
    productTypes: [ApiAnalyticsMediaType!]
    startDate: Date!
  ): RollupAdvertiserPerformanceValue!
}

type RollupAdvertiserPerformanceValue implements BaseRollupPerformanceValue {
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  viewCompletionRate: Float!
  viewsCompleted: Float!
  viewsStarted: Float!
}

input SaveManualCustomCampaignInput {
  budget: Float
  details: String
  end: DateTime
  id: Float
  isRecommended: Boolean!
  monthlyBudget: [Float!]
  name: String
  product: String
  start: DateTime
  status: CampaignStatus
}

input SaveManualDisplayCampaignInput {
  behavioralTargets: [String!]
  budget: Float
  contentTargets: [String!]
  cpm: Float
  demographicTargets: [String!]
  details: String
  end: DateTime
  forecast: CampaignForecastInput
  id: Float
  isRecommended: Boolean!
  monthlyBudget: [Float!]
  name: String
  nativeTargets: [String!]
  note: NoteInput
  product: String
  proposedImpressions: Float
  start: DateTime
  status: CampaignStatus
}

input SaveManualEmailCampaignInput {
  addOns: [String!]
  budget: Float
  campaignBudget: Float
  consumerInterestTargets: [String!]
  consumerLifestyleTargets: [String!]
  cpm: Float
  demographicTargets: [String!]
  flatFee: Float
  id: Float
  isFlatFeeBased: Boolean
  isRecommended: Boolean!
  name: String
  note: NoteInput
  product: String
  proposedSends: Float
  start: DateTime
  status: CampaignStatus
}

input SaveManualGeofencingCampaignInput {
  audienceTargeting: String
  budget: Float
  cpm: Float
  details: String!
  end: DateTime!
  id: Float
  isRecommended: Boolean!
  locationsFileId: Float
  locationsFileUri: String
  monthlyBudget: [Float!]!
  name: String
  note: NoteInput
  product: String
  proposedImpressions: Float
  setupFee: Float
  start: DateTime
  status: CampaignStatus
}

input SaveManualSEMCampaignInput {
  adSpend: Float
  budget: Float
  end: DateTime
  id: Float
  isRecommended: Boolean!
  managementFee: Float
  monthlyBudget: [Float!]
  name: String
  note: NoteInput
  product: String
  start: DateTime
  status: CampaignStatus
}

input SaveManualSEOCampaignInput {
  budget: Float
  end: DateTime
  franchiseMultiLocation: Boolean
  id: Float
  isRecommended: Boolean!
  monthsDuration: Float
  name: String
  note: NoteInput
  numberOfLocations: Float
  product: String
  start: DateTime
  status: CampaignStatus
}

input SaveManualSocialMediaCampaignInput {
  adSpend: Float
  behavioralTargets: [String!]
  budget: Float
  end: DateTime
  id: Float
  isRecommended: Boolean!
  managementFee: Float
  monthlyBudget: [Float!]
  name: String
  note: NoteInput
  product: String
  proposedImpressions: Float
  setupFee: Float
  start: DateTime
  status: CampaignStatus
}

input SaveManualSpecializedCampaignInput {
  adSpend: Float
  automateTicketCreation: Boolean
  budget: Float
  cpm: Float
  csvFileId: Float
  description: String
  end: DateTime
  id: Float
  impressions: Float
  isCPVBased: Boolean
  isRecommended: Boolean!
  managementFee: Float
  monthlyBudget: [Float!]
  monthsDuration: Float
  name: String
  note: NoteInput
  product: String
  start: DateTime
  status: CampaignStatus
}

input SaveManualStreamingAudioCampaignInput {
  behavioralTargets: [String!]
  budget: Float
  contentTargets: [String!]
  cpm: Float
  demographicTargets: [String!]
  end: DateTime
  id: Float
  isRecommended: Boolean!
  monthlyBudget: [Float!]
  name: String
  note: NoteInput
  product: String
  proposedImpressions: Float
  start: DateTime
  status: CampaignStatus
}

input SaveManualVideoCampaignInput {
  addOns: [String!]
  behavioralTargets: [String!]
  budget: Float
  contentTargets: [String!]
  cpm: Float
  demographicTargets: [String!]
  details: String
  end: DateTime
  id: Float
  isCPVBased: Boolean
  isRecommended: Boolean!
  monthlyBudget: [Float!]
  name: String
  note: NoteInput
  product: String
  proposedImpressions: Float
  start: DateTime
  status: CampaignStatus
}

type SearchAdGroupPerformanceMetric {
  interval: AnalyticsInterval!
  value: SearchAdGroupPerformanceValue!
}

type SearchAdGroupPerformanceMetricsResponse {
  metrics: [SearchAdGroupPerformanceMetric!]!
}

type SearchAdGroupPerformanceSummaryResponse {
  metrics: [SearchAdGroupPerformanceMetric!]!
  popMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): SearchPopMetrics
}

type SearchAdGroupPerformanceValue implements BaseAdGroupPerformanceValue & BaseSearchPerformanceValue {
  adGroupId: String!
  adGroupName: String!
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  impressions: Float!
  spend: CurrencyDTO
}

type SearchAdvertiserPerformanceMetric {
  interval: AnalyticsInterval!
  value: SearchAdvertiserPerformanceValue!
}

type SearchAdvertiserPerformanceMetricsResponse {
  metrics: [SearchAdvertiserPerformanceMetric!]!
}

type SearchAdvertiserPerformanceSummaryResponse {
  metrics: [SearchAdvertiserPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): SearchPopMetrics
}

type SearchAdvertiserPerformanceValue implements BaseSearchPerformanceValue {
  advertiserId: String!
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  impressions: Float!
  spend: CurrencyDTO
}

input SearchAdvertiserProductRequest {
  advertisingClasses: [String!]
  advertisingLines: [String!]
  advertisingTypes: [String!]
  ids: [ID!]
  name: String
  pageNumber: Int! = 1
  pageSize: Int! = 25
}

type SearchCampaignPerformanceMetric {
  interval: AnalyticsInterval!
  value: SearchCampaignPerformanceValue!
}

type SearchCampaignPerformanceMetricsResponse {
  metrics: [SearchCampaignPerformanceMetric!]!
}

type SearchCampaignPerformanceSummaryResponse {
  metrics: [SearchCampaignPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): SearchPopMetrics
}

type SearchCampaignPerformanceValue implements BaseCampaignPerformanceValue & BaseSearchPerformanceValue {
  campaignId: String!
  campaignName: String
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  impressions: Float!
  spend: CurrencyDTO
}

type SearchConversionValue {
  conversionActionName: String!
  conversions: Float!
}

type SearchConversionsResponse {
  interval: AnalyticsInterval!
  value: SearchConversionValue!
}

type SearchDeviceTypeMetricsResponse {
  interval: AnalyticsInterval!
  value: SearchDeviceTypeValue!
}

type SearchDeviceTypeValue implements BaseGoogleDeviceTypeValue {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  deviceType: GoogleDeviceTypeEnum!
  impressions: Float!
  spend: CurrencyDTO
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

"""
Input for `externalAdvertisersEager` query.
"""
input SearchEagerExternalAdvertisersInput {
  """
  The hierarchy id of External Advertisers to find. Results are associated with at least the provided hierarchy id.
  """
  hierarchyId: ID!

  """
  The name of External Advertisers to find. Supports partial matching.
  """
  name: String

  """
  Return page _n_. Must be greater than 0.
  """
  pageNumber: Int! = 1

  """
  Return _n_ elements per page. Must be between 1 and 100.
  """
  pageSize: Int! = 25

  """
  Platform to filter External Advertisers by.
  """
  platform: Platform!

  """
  A list of Platform Advertiser IDs to filter the External Advertisers by.
  """
  platformAdvertiserIds: [String!]
}

"""
Input for `externalAdGroups` query.
"""
input SearchExternalAdGroupsInput {
  """
  A list of External Ad Group IDs to return.
  """
  ids: [ID!]

  """
  Return page _n_. Must be greater than 0.
  """
  pageNumber: Int! = 1

  """
  Return _n_ elements per page. Must be between 1 and 100.
  """
  pageSize: Int! = 25

  """
  Platform to filter External Ad Groups by.
  """
  platform: Platform

  """
  A list of Platform Ad Group IDs to filter External Ad Groups by.
  """
  platformAdGroupIds: [String!]

  """
  A Platform Advertiser ID to filter External Ad Groups by.
  """
  platformAdvertiserId: String

  """
  A Platform Campaign ID to filter External Ad Groups by.
  """
  platformCampaignId: String
}

"""
Input for `externalAdvertisers` query.
"""
input SearchExternalAdvertisersInput {
  """
  The hierarchy id of External Advertisers to find. Results are associated with at least the provided hierarchy id.
  """
  hierarchyId: ID

  """
  A list of External Advertiser IDs to return.
  """
  ids: [ID!]

  """
  The name of External Advertisers to find. Supports partial matching.
  """
  name: String

  """
  Return page _n_. Must be greater than 0.
  """
  pageNumber: Int! = 1

  """
  Return _n_ elements per page. Must be between 1 and 100.
  """
  pageSize: Int! = 25

  """
  Platform to filter External Advertisers by.
  """
  platform: Platform

  """
  A list of Platform Advertiser IDs to filter the External Advertisers by.
  """
  platformAdvertiserIds: [String!]
}

"""
Input for `externalCampaigns` query.
"""
input SearchExternalCampaignsInput {
  """
  A list of External Campaign IDs to return.
  """
  ids: [ID!]

  """
  Return page _n_. Must be greater than 0.
  """
  pageNumber: Int! = 1

  """
  Return _n_ elements per page. Must be between 1 and 100.
  """
  pageSize: Int! = 25

  """
  Platform to filter External Advertisers by.
  """
  platform: Platform

  """
  A Platform Advertiser ID to filter External Advertisers by.
  """
  platformAdvertiserId: String

  """
  A list of Platform Campaign IDs to filter External Advertisers by.
  """
  platformCampaignIds: [String!]
}

"""
Input for `facebookAdGroupAudiences` query.
"""
input SearchFacebookAdGroupAudiencesInput {
  """
  Return page _n_. Must be greater than 0.
  """
  pageNumber: Int! = 1

  """
  Return _n_ elements per page. Must be between 1 and 100.
  """
  pageSize: Int! = 25

  """
  A list of Platform Ad Group IDs to filter Facebook Ad Group Audiences by.
  """
  platformAdGroupIds: [String!]!
}

type SearchGeoMetricsResponse {
  interval: AnalyticsInterval!
  value: SearchGeoValue!
}

type SearchGeoValue implements BaseGeoValue {
  boundary: MapboxBoundary
  city: String
  clicks: Float!
  conversions: Float!
  coordinates: LatLongType
  country: String!
  impressions: Float!
  location: String!
  region: String!
  zip: String
}

"""
Input for `searchHierarchyProducts` query.
"""
input SearchHierarchyProductRequest {
  """
  An advertiser ID to filter Hierarchy Products by.
  When given with a hierarchy ID, ensure that the advertiser belongs to the given hierarchy!
  """
  advertiserId: ID

  """
  A list of Advertising Product Classes to filter Hierarchy Products by.
  """
  advertisingProductClasses: [String!]

  """
  A list of Advertising Product Lines to filter Hierarchy Products by.
  """
  advertisingProductLines: [String!]

  """
  A Hierarchy ID to filter Hierarchy Products by.
  """
  hierarchyId: ID

  """
  A list of Hierarchy Product IDs to return.
  """
  ids: [ID!]

  """
  A list of Legacy Product Keys to filter Hierarchy Products by.
  """
  legacyProductKeys: [String!]

  """
  The name of a Hierarchy Product to find.
  Supports partial matches on `HierarchyProduct.customName` and `Product.name`.
  """
  name: String

  """
  Return page _n_. Must be greater than 0.
  """
  pageNumber: Int! = 1

  """
  Return _n_ elements per page. Must be between 1 and 50.
  """
  pageSize: Int! = 25

  """
  A Product ID to filter Hierarchy Products by.
  """
  productId: ID

  """
  The status of the hierarchy product.
  """
  status: HierarchyProductStatus
}

type SearchKeywordsResponse {
  interval: AnalyticsInterval!
  value: SearchKeywordsValue!
}

type SearchKeywordsValue {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  impressions: Float!
  keyword: String!
  spend: CurrencyDTO
}

"""
Input for `linkedAdvertisers` query.
"""
input SearchLinkedAdvertisersInput {
  """
  A list of Advertiser IDs to filter Linked Advertisers by.
  """
  advertiserIds: [Int!]

  """
  Return page _n_. Must be greater than 0.
  """
  pageNumber: Int! = 1

  """
  Return _n_ elements per page. Must be between 1 and 100.
  """
  pageSize: Int! = 25

  """
  Platform to filter Linked Advertisers by.
  """
  platform: Platform

  """
  A list of Platform Advertiser IDs to filter Linked Advertisers by.
  """
  platformAdvertiserIds: [String!]

  """
  The hierarchy that created the linked advertisers.
  """
  sourceHierarchyId: ID
}

type SearchLocationsResponse implements PaginatedResponse {
  pageNumber: Int!
  pageSize: Int!
  results: [Location!]!
  totalCount: Int
  totalPages: Int
}

enum SearchOrderDetailStatusEnum {
  CANCELED
  COMPLETE
  DRAFT
  LIVE
  NEW
  PAUSED
  PENDING
  SOLD
}

type SearchPopMetrics {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: Float!
  costPerConversion: Float!
  ctr: Float!
  impressions: Float!
  spend: Float!
}

"""
Input for `tradedeskCampaignConversionTrackingLabelSets` query.
"""
input SearchTradedeskCampaignConversionTrackingLabelSetsInput {
  """
  Return page _n_. Must be greater than 0.
  """
  pageNumber: Int! = 1

  """
  Return _n_ elements per page. Must be between 1 and 100.
  """
  pageSize: Int! = 25

  """
  A list of Platform Campaign IDs to filter Tradedesk Campaign Conversion Tracking Label Sets by.
  """
  platformCampaignIds: [String!]!
}

input SendTemplatedEmailInput {
  """
  The list of addresses to blind copy this email to.
  """
  bccEmails: [String!]

  """
  The list of addresses to copy this email to.
  """
  ccEmails: [String!]

  """
  The template to use for the email subject and body.
  """
  templateId: ID!

  """
  The template parameters to populate the given email template.
  """
  templateParams: JSON

  """
  The list of addresses to direct this email to.
  """
  toEmails: [String!]!
}

type ShallowCampaign {
  budget: Float
  created: DateTime
  end: DateTime
  id: Float
  name: String
  note: Note
  orderId: Float
  product: Product
  productKey: String
  start: DateTime
  status: CampaignStatus
  ticketNumber: String
  type: String!
}

"""
The signed uri of a `File`.
"""
type SignedURI {
  """
  The date/time when the `uri` link will expire.
  After this time you can no longer download the file and will need to re-request the SignedURI.
  """
  expiresAt: DateTime!

  """
  The URI the file can be downloaded from.
  """
  uri: String!
}

type SoftwareProduct implements ProductResponse {
  category: ProductCategory!
  created: DateTime!
  description: String
  id: ID!
  legacyProductKeys: [String!]
  name: String!
  productForms: [ProductForm!]!
  type: ProductType!
  updated: DateTime!
}

"""
Possible sort directions
"""
enum SortDirection {
  ASC
  DESC
}

input SortOrderDetailsData {
  direction: OrderDetailsSearchSortDirection!
  field: OrderDetailsSearchSortFields!
}

input SortOrdersData {
  direction: OrderSearchSortDirection!
  field: OrderSearchSortFields!
}

type TargetValues {
  app: Float!
  ctv: Float!
  uniques: Float!
  value: String!
  web: Float!
}

"""
describes the day and time for an analytics value
"""
type TimeOfDayInterval {
  """
  day of the week, ie MONDAY
  """
  dayOfWeek: DayOfWeekEnum

  """
  hour of day, ie 0 -> 23
  """
  hourOfDay: Float!
}

"""
A tracking label on a Tradedesk campaign.
"""
input TradedeskCampaignConversionTrackingInput {
  name: String!
  reportingColumnId: Int!
}

type TradedeskCampaignConversionTrackingLabel {
  name: String!
  reportingColumnId: Int!
}

type TradedeskCampaignConversionTrackingLabelSet {
  conversionTrackingLabels: [TradedeskCampaignConversionTrackingLabel!]!
  platformCampaignId: String!
  platformCampaignName: String!
}

"""
A request to upsert conversion tracking labels on a single Tradedesk external campaign.
"""
input TradedeskCampaignConversionTrackingLabelSetInput {
  conversionTrackingLabels: [TradedeskCampaignConversionTrackingInput!]!
  platformCampaignId: String!
}

"""
Paginated Tradedesk Campaign Conversion Tracking Label Sets.
"""
type TradedeskCampaignConversionTrackingLabelSets {
  pageNumber: Int!
  pageSize: Int!
  results: [TradedeskCampaignConversionTrackingLabelSet!]!
  totalCount: Int!
  totalPages: Int!
}

type TtdAudienceResponse {
  interval: AnalyticsInterval!
  value: TtdAudienceValue!
}

type TtdAudienceValue {
  clicks: Float!
  ctr: Float!
  impressions: Float!
  name: String!
}

enum TtdDeviceTypeEnum {
  CONNECTED_TV
  DESKTOP
  MOBILE
  OTHER
  TABLET
}

"""
Possible types for targeting
"""
enum TypeEnum {
  BEHAVIORAL
  CONSUMER_INTEREST
  CONSUMER_LIFESTYLE
  CONTENT
  DEMO
  NATIVE
}

type UnlinkedPlatformCampaign {
  externalCampaignId: String!
  name: String!
  platform: PlatformEnum!
}

input UnsubscribeInput {
  """
  The list of emails to unsubscribe.
  """
  emails: [String!]!
}

input UpdateAdMixCampaignInput {
  budget: Float!
  id: Float
  monthlyBudget: [Float!]!
  name: String!
  platformAllocations: [UpdatePlatformAllocationInput!]
  status: String!
}

input UpdateAdvertiserInput {
  hierarchyId: Float
  id: Float!
  industry: String
  keywords: [String!]
  logoFileId: Float
  microIndustries: [String!]
  name: String
  website: String
}

"""
Input for `updateAdvertisingProduct`.
"""
input UpdateAdvertisingProductInput {
  advertisingClass: String
  advertisingLine: String
  advertisingType: String
  description: String

  """
  The ID of the Advertising Product to update.
  """
  id: ID!
  legacyProductKeys: [String!]

  """
  The name of the Advertising Product. Must be unique. `name` is used in various places to identify
  products and changes could have unintended consequences - proceed with caution.
  """
  name: String
  platforms: [Platform!]
  productFormAppIds: [ID!]
  type: ProductType
}

input UpdateBusinessHourInput {
  closeTime: String
  id: Float!
  openTime: String
}

"""
Input for `updateCampaign`.
"""
input UpdateCampaignInput {
  """
  The ID of the campaign on the external platform
  """
  externalCampaignId: ID

  """
  The ID of the campaign to update
  """
  id: ID!

  """
  A human readable name for the campaign
  """
  name: String

  """
  The platform to associate this campaign with
  """
  platform: Platform
}

input UpdateConversationContextInput {
  conversationId: Int!

  """
  The default notification data for user notifications that are created whenever a message is added to the conversation.
  """
  notificationData: NotificationDataInput

  """
  The `refereceUrl` for user notifications that are created whenever a message is added to the conversation.
  """
  referenceUrl: String

  """
  The `subject` for emails that are sent whenever a message is added to the conversation.
  """
  subject: String
}

input UpdateConversationListenerUserEmailsInput {
  id: Int!
  userEmails: [String!]! = []
}

"""
Input for `UpdateFile` Mutation.
"""
input UpdateFileInput {
  """
  The date/time when the files content will be removed and can no longer be downloaded.
  """
  fileExpiryDate: DateTime

  """
  The id of the file to update
  """
  id: ID!
}

input UpdateHierarchyInput {
  id: Float!
  mongoId: String
  name: String
  ownerId: String
  parentId: Float
  shortName: String
  styleColor1: String
  styleColor2: String
  styleLogo: String
}

"""
Input for `updateHierarchyProductConfig`.
"""
input UpdateHierarchyProductConfigInput {
  """
  The customized name to display instead of the product name within the hierarchy.

  When blank, `customName` will be reset and inherited from the parent product config..
  """
  customName: String

  """
  The specific advertisers that the product should be enabled for when `enabledForAllAdvertisers == false`.
  """
  enabledAdvertiserIds: [ID!]

  """
  When true, the product is enabled for all advertisers that are a child of the hierarchy.
  """
  enabledForAllAdvertisers: Boolean

  """
  The goal types to use for the product within the hierarchy.

  When empty, `goalTypes` will be reset and inherited from the parent product config.
  """
  goalTypes: [AllocationGoalType!]

  """
  The ID of the hierarchy being configured.
  """
  hierarchyId: ID!

  """
  The ID of the product being configured.
  """
  productId: ID!

  """
  The ID of a rate card to use for the product within the hierarchy.
  """
  rateCardId: ID

  """
  The status of the product within the hierarchy.

  When `ENABLED`, the product must also be enabled in the parent hierarchy.

  When the status changes, all child hierarchy product configs will be updated to inherit the new status.
  """
  status: HierarchyProductStatus
}

input UpdateHierarchyProductRequest {
  customName: String
  enabledAdvertiserIds: [ID!]
  enabledForAllAdvertisers: Boolean
  goalTypes: [AllocationGoalType!]
  rateCardId: ID
}

"""
Input for `updateLineItem`.
"""
input UpdateLineItemInput {
  """
  The ID of the rate to set as active. This must exist on the line item's associated rate card.
  """
  activeRateId: ID

  """
  The advertiser location IDs for this line item. Unless the value is null,
  this overwrites any existing value.
  """
  advertiserLocationIds: [ID!]

  """
  Provide allocations for the line item. Unless the value is null, the provided list will overwrite any
  previous allocations on the line item.
  """
  allocations: [LineItemAllocationInput!]

  """
  The assignee's user id. Set this to a blank string to unset the assignee.
  """
  assigneeUserId: ID

  """
  The list of flags to add to the line item. Unless the value is null, the provided list will overwrite any
  previous flags on the line item.
  Example: `["Needs Response", "Missing Information"]`
  """
  flags: [String!]

  """
  The follower user ids. Unless the value is null, the provided list will overwrite any
  previous followers on the order detail.
  """
  followerUserIds: [String!]

  """
  The geolocations that are associated with this input. Any existing locations will be overwritten!
  """
  geoLocations: GeoLocationsInput

  """
  The ID of the line item to update.
  """
  id: ID!

  """
  The message conversation ID.
  """
  messageConversationId: ID

  """
  The name of the line item.
  """
  name: String

  """
  The notes conversation ID.
  """
  notesConversationId: ID

  """
  Information specific to the line item's product (defined by the productKey).
  """
  productInfo: JSON

  """
  Freeform notes to store additional info about the proposed phase of the line item
  """
  proposalNotes: String

  """
  The ID of the rate card.
  """
  rateCardId: ID

  """
  The requesting user's id. Set this to a blank string to reset it to default (order requester).
  """
  requesterUserId: ID

  """
  The status of the line item.
  """
  status: LineItemStatus

  """
  The targeting information for this line item. Only non-null values of fields (eg 'behavioral') will be applied.
  All existing targeting information will remain when not overriden.
  """
  targeting: LineItemTargetingInput
}

"""
Input for `updateOrder`.
"""
input UpdateOrderInput {
  """
  The ID of the advertiser the order pertains to.
  """
  advertiserId: ID

  """
  The user ID that is assigned to the order. Provide an empty string to remove the assignee.
  """
  assigneeUserId: ID

  """
  The date that this entity became an official order. This will be applied to any existing line items.
  """
  dateOfOrder: Date

  """
  The ID of the order to update
  """
  id: ID!

  """
  The name of the order.
  """
  name: String

  """
  Custom information specific to the order.
  """
  orderInfo: JSON

  """
  The requesting user's id. Set this to a blank string to reset it to default (order creator).
  """
  requesterUserId: ID
}

"""
Input for `mutation updateOrderRequesters`.
"""
input UpdateOrderRequestersInput {
  """
  If true, apply the requester ID to all line items. `lineItemIds` will be ignored if true.
  """
  applyToAllLineItems: Boolean! = false

  """
  If true, change the requester on the order.
  """
  applyToOrder: Boolean! = true

  """
  The list of the line item IDs to apply the requester to. If null or empty, no line items will be impacted (unless `applyToAllLineItems` is true).
  """
  lineItemIds: [ID!]

  """
  The ID of the order to apply this update to. Required even when updating only line items (ie `applyToOrder` is false).
  """
  orderId: ID!

  """
  The requester ID to apply to the order and or line items.
  """
  requesterId: ID!
}

input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input UpdatePlatformAllocationInput {
  allocation: Float
  behavioralTargets: [String!]
  budget: Float
  contentTargets: [String!]
  demographicTargets: [String!]
  id: Float
  platform: String
}

input UpdateProposalInput {
  adMixCampaigns: [UpdateAdMixCampaignInput!]
  advertiserId: Float
  budget: Float
  end: DateTime
  goal: ProposalGoalType
  id: Float!
  industry: String
  keywords: [String!]
  locations: [String!]
  locationsObject: ProposalLocationsInput
  manualCustomCampaigns: [SaveManualCustomCampaignInput!]
  manualDisplayCampaigns: [SaveManualDisplayCampaignInput!]
  manualEmailCampaigns: [SaveManualEmailCampaignInput!]
  manualGeofencingCampaigns: [SaveManualGeofencingCampaignInput!]
  manualSEMCampaigns: [SaveManualSEMCampaignInput!]
  manualSEOCampaigns: [SaveManualSEOCampaignInput!]
  manualSocialMediaCampaigns: [SaveManualSocialMediaCampaignInput!]
  manualSpecializedCampaigns: [SaveManualSpecializedCampaignInput!]
  manualStreamingAudioCampaigns: [SaveManualStreamingAudioCampaignInput!]
  manualVideoCampaigns: [SaveManualVideoCampaignInput!]
  microIndustries: [String!]
  name: String
  start: DateTime
  status: ProposalStatus
  type: String
  website: String
}

input UpdateRateInput {
  """
  The billing type of the rate.
  """
  billingType: BillingType

  """
  The description of the rate.
  """
  description: String

  """
  The flight minimum days amount required to spend for this rate.
  """
  flightMinimum: Float

  """
  The ID of the rate to update.
  """
  id: ID!

  """
  The monthly minimum budget required to spend for this rate.
  """
  monthlyBudgetMinimum: Float

  """
  The monthly minimum impressions required to spend for this rate.
  """
  monthlyImpressionMinimum: Float

  """
  The rate's retail amount.
  """
  retailAmount: Float

  """
  The rate's wholesale amount.
  """
  wholesaleAmount: Float
}

input UpdateUserAvatarInput {
  id: String!
  imageFileId: Float
}

input UpdateUserHierarchiesInput {
  hierarchies: [HierarchiesInput!]!
  id: String!
}

input UpdateUserInput {
  data: UserDataInput
  email: String
  firstName: String
  fullName: String
  id: String!
  lastName: String
  middleName: String
  username: String
}

input UpdateUserPermissionsInput {
  entityId: String
  grantType: GrantType
  hierarchyId: String
  hierarchyType: HierarchyType
  id: String!
  permissions: [String!]
  roles: [UserPermissions!]
}

"""
Input for `mutation upsertAllocationRollup`
"""
input UpsertAllocationRollupInput {
  """
  The range for which this allocation should be active.
  """
  dateRange: LineItemAllocationDateRangeInput!

  """
  Amounts to apply to this allocation. A `null` value for a nested property will be treated as nonexistent.
  It is *not* possible to reset amounts.
  """
  goalAmounts: LineItemAllocationRollupGoalAmountsInput!

  """
  The subtype of the allocation. Multiple allocations of different subtypes can exist in identical date ranges.
  """
  goalSubtype: AllocationGoalSubtype! = NONE

  """
  The ID of the line item to add this allocation rollup onto.
  """
  lineItemId: ID!
}

input UpsertExternalAdGroupInput {
  """
  The display name.
  """
  name: String!

  """
  The Platform the External Ad Group belongs to.
  """
  platform: Platform!

  """
  The Platform Ad Group ID the External Ad Group belongs to.
  """
  platformAdGroupId: String!

  """
  The Platform Campaign ID the External Ad Group belongs to.
  """
  platformCampaignId: String!
}

"""
Input for `upsertExternalAdGroups` mutation.
"""
input UpsertExternalAdGroupsInput {
  """
  A list of External Ad Groups to upsert.
  """
  adGroups: [UpsertExternalAdGroupInput!]!
}

input UpsertExternalAdvertiserInput {
  """
  Describes hierarchies and related metadata to associate with the external advertiser.
  Nullable for backwards-compatibility.
  """
  hierarchies: [ExternalAdvertiserHierarchyInput!]

  """
  The display name of the External Advertiser.
  """
  name: String!

  """
  The Platform of the External Advertiser.
  """
  platform: Platform!

  """
  The Platform Advertiser ID this External Advertiser belongs to.
  """
  platformAdvertiserId: String!
}

"""
Input for `upsertExternalAdvertisers` mutation.
"""
input UpsertExternalAdvertisersInput {
  """
  A list of External Advertisers to upsert.
  """
  advertisers: [UpsertExternalAdvertiserInput!]!
}

input UpsertExternalCampaignInput {
  """
  The display name.
  """
  name: String!

  """
  The Platform the External Campaign belongs to.
  """
  platform: Platform!

  """
  The Platform Advertiser ID the External Campaign belongs to.
  """
  platformAdvertiserId: String!

  """
  The Platform Campaign ID the External Campaign belongs to.
  """
  platformCampaignId: String!
}

"""
Input for `upsertExternalCampaigns` mutation.
"""
input UpsertExternalCampaignsInput {
  """
  A list of External Campaigns to upsert.
  """
  campaigns: [UpsertExternalCampaignInput!]!
}

"""
Input for a single Facebook ad group's audience metadata.
"""
input UpsertFacebookAdGroupAudienceInput {
  """
  JSON describing audience targeting data for this ad group.
  """
  audienceTargetingJson: String

  """
  The Facebook ad group id to which metadata will be added.
  """
  platformAdGroupId: String!
}

"""
Input for the `upsertFacebookAdGroupAudiences` mutation.
"""
input UpsertFacebookAdGroupAudiencesInput {
  """
  A list of Facebook ad group metadata to upsert.
  """
  facebookAdGroupAudienceMetadata: [UpsertFacebookAdGroupAudienceInput!]!
}

"""
The input to the UpsertImprovadoAccountSettingsInput mutation.
"""
input UpsertImprovadoAccountSettingsInput {
  """
  A list of improvado account ids for which this setting update is meant for
  """
  accountIds: [ID!]!

  """
  The subagency that this setting should be applied to. Important since an account can belong to multiple subagencies.
  """
  subagency: ID!

  """
  The boolean flag to apply that decides whether improvado pulls new data or not for these improvado accounts
  """
  upload: Boolean!
}

"""
A request to upsert conversion tracking labels on a list of existing Tradedesk external campaigns.
"""
input UpsertTradedeskCampaignConversionTrackingLabelSetsInput {
  labelSets: [TradedeskCampaignConversionTrackingLabelSetInput!]!
}

type UpsertedExternalAdGroups {
  adGroups: [ExternalAdGroup!]!
}

type UpsertedExternalAdvertisers {
  advertisers: [ExternalAdvertiser!]!
}

type UpsertedExternalCampaigns {
  campaigns: [ExternalCampaign!]!
}

"""
The output of the Upsert Improvado Account Settings Mutation. Ids include those who successfully updated.
"""
type UpsertedImprovadoAccountSettings {
  """
  A list of improvado account ids who were successfully updated with this setting
  """
  accountIds: [ID!]!

  """
  The subagency that this setting was applied to. Important since an account can belong to multiple subagencies.
  """
  subagency: ID!

  """
  The setting that these Improvado Accounts have been updated to
  """
  upload: Boolean!
}

"""
Federated `User` entity.
"""
type User {
  active: Boolean
  data: UserData
  email: String
  firstName: String
  fullName: String
  grants: [GrantsResponse!]!

  """
  The id of the user.  This is (technically) an ID type but because App's has this marked as a 'String'
  we have to mirror it as a 'String' here
  """
  id: String
  imageFile: File
  imageUrl: String @deprecated(reason: "Use imageFile field instead")
  lastLoginInstant: Float
  lastName: String
  logoFile: File
  logoUri: String @deprecated(reason: "Use logoFile field instead")
  middleName: String
  parentAdvertiser: Advertiser
  parentHierarchies: [Hierarchy!]
  parentHierarchy: Hierarchy
  parentHierarchyExternalIds: [String!]
  permissions: [UserPermissions!]!
  registrations: [UserRegistration!]
  tenantId: String
  username: String
  verified: Boolean
}

type UserData {
  imageFileId: Float
  parentId: String
  type: UserType
}

input UserDataInput {
  imageFileId: Float
  parentId: String
  type: UserType
}

enum UserPermissions {
  allowIntegrations
  allowNewReports
  canViewPacingKPI
  editCpm
  hideKnowledgeBase
  hideResourceCenter
  subAdmin
  submitAsIO
  updateRequestor
}

type UserRegistration {
  applicationId: String
  roles: [String!]
  username: String
  verified: Boolean
}

input UserScope {
  advertiserId: Float
  hierarchyId: Float
  includeLineItemAssignees: Boolean
}

input UserSort {
  direction: String!
  field: String!
}

"""
Possible types for users
"""
enum UserType {
  admin
  customer
  division
  lineItemAssignee
  ops
}

"""
Response type for `query validateOrder`.
"""
enum ValidOrder {
  """
  The order is not valid.
  """
  FAILURE

  """
  The order is valid.
  """
  SUCCESS
}

input ValidateConversationTokenInput {
  authToken: ConversationAuthInput!
}

type ValidatePasswordResponse {
  errors: [String!]!
  result: Boolean!
}

type VideoAdGroupPerformanceMetric {
  interval: AnalyticsInterval!
  value: VideoAdGroupPerformanceValue!
}

type VideoAdGroupPerformanceMetricsResponse {
  metrics: [VideoAdGroupPerformanceMetric!]!
}

type VideoAdGroupPerformanceSummaryResponse {
  metrics: [VideoAdGroupPerformanceMetric!]!
  popMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): VideoPopMetrics
}

type VideoAdGroupPerformanceValue implements BaseVideoPerformanceValue {
  adGroupId: String!
  adGroupName: String!
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
  viewsStarted: Float!
}

type VideoAdvertiserPerformanceMetric {
  interval: AnalyticsInterval!
  value: VideoAdvertiserPerformanceValue!
}

type VideoAdvertiserPerformanceMetricsResponse {
  metrics: [VideoAdvertiserPerformanceMetric!]!
}

type VideoAdvertiserPerformanceSummaryResponse {
  metrics: [VideoAdvertiserPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): VideoPopMetrics
}

type VideoAdvertiserPerformanceValue implements BaseVideoPerformanceValue {
  advertiserId: String!
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
  viewsStarted: Float!
}

type VideoBrandMetricsResponse {
  interval: AnalyticsInterval!
  value: VideoBrandValue!
}

type VideoBrandValue implements BaseBrandValue {
  brand: Brand
  brandId: String
  clicks: Float!
  ctr: Float!
  impressions: Float!
  viewCompletionRate: Float!
  viewsCompleted: Float!
}

type VideoCampaignPerformanceMetric {
  interval: AnalyticsInterval!
  value: VideoCampaignPerformanceValue!
}

type VideoCampaignPerformanceMetricsResponse {
  aggregations: CampaignAggregations!
  metrics: [VideoCampaignPerformanceMetric!]!
}

type VideoCampaignPerformanceSummaryResponse {
  metrics: [VideoCampaignPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): VideoPopMetrics
}

type VideoCampaignPerformanceValue implements BaseVideoPerformanceValue {
  campaignId: String!
  campaignName: String
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
  viewsStarted: Float!
}

type VideoConversionValue implements BaseConversionValue {
  conversions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  trackingLabelName: String
  trackingLabelSequence: Float!
}

type VideoConversionsResponse {
  interval: AnalyticsInterval!
  value: VideoConversionValue!
}

type VideoCreativeMetricsResponse {
  interval: AnalyticsInterval!
  value: VideoCreativeValue!
}

type VideoCreativeValue implements BaseTtdCreativeValue {
  clicks: Float!
  conversions: Float!
  creative: Creative!
  creativeId: String!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
  viewsStarted: Float!
}

type VideoDeviceTypeMetricsResponse {
  interval: AnalyticsInterval!
  value: VideoDeviceTypeValue!
}

type VideoDeviceTypeValue implements BaseDeviceTypeValue {
  clicks: Float!
  ctr: Float!
  deviceType: TtdDeviceTypeEnum!
  impressions: Float!
  viewCompletionRate: Float!
  viewsCompleted: Float!
  viewsStarted: Float!
}

type VideoGeoMetricsResponse {
  interval: AnalyticsInterval!
  value: VideoGeoValue!
}

type VideoGeoValue implements BaseGeoValue {
  boundary: MapboxBoundary
  city: String
  clicks: Float!
  conversions: Float!
  coordinates: LatLongType
  country: String!
  impressions: Float!
  location: String!
  region: String!
  zip: String
}

type VideoPopMetrics {
  clicks: Float!
  conversions: Float!
  ctr: Float!
  impressions: Float!
  postClickConversions: Float!
  postImpressionConversions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
  viewsStarted: Float!
}

type VideoTimeOfDayMetricsResponse implements BaseTimeOfDayResponse {
  interval: TimeOfDayInterval!
  value: VideoTimeOfDayValue!
}

type VideoTimeOfDayValue implements BaseTimeOfDayValue {
  clicks: Float!
  ctr: Float!
  impressions: Float!
  viewCompletionRate: Float!
  viewsCompleted: Float!
}

"""
Represents NULL values
"""
scalar Void

type YoutubeAdGroupPerformanceMetric {
  interval: AnalyticsInterval!
  value: YoutubeAdGroupPerformanceValue!
}

type YoutubeAdGroupPerformanceMetricsResponse {
  metrics: [YoutubeAdGroupPerformanceMetric!]!
}

type YoutubeAdGroupPerformanceSummaryResponse {
  metrics: [YoutubeAdGroupPerformanceMetric!]!
  popMetrics(
    adGroupId: String
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): YoutubePopMetrics
}

type YoutubeAdGroupPerformanceValue implements BaseAdGroupPerformanceValue & BaseYoutubePerformanceValue {
  adGroupId: String!
  adGroupName: String!
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  impressions: Float!
  spend: CurrencyDTO
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

type YoutubeAdvertiserPerformanceMetric {
  interval: AnalyticsInterval!
  value: YoutubeAdvertiserPerformanceValue!
}

type YoutubeAdvertiserPerformanceMetricsResponse {
  metrics: [YoutubeAdvertiserPerformanceMetric!]!
}

type YoutubeAdvertiserPerformanceSummaryResponse {
  metrics: [YoutubeAdvertiserPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): YoutubePopMetrics
}

type YoutubeAdvertiserPerformanceValue implements BaseYoutubePerformanceValue {
  advertiserId: String!
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  impressions: Float!
  spend: CurrencyDTO
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

type YoutubeCampaignPerformanceMetric {
  interval: AnalyticsInterval!
  value: YoutubeCampaignPerformanceValue!
}

type YoutubeCampaignPerformanceMetricsResponse {
  metrics: [YoutubeCampaignPerformanceMetric!]!
}

type YoutubeCampaignPerformanceSummaryResponse {
  metrics: [YoutubeCampaignPerformanceMetric!]!
  popMetrics(
    advertiserId: String!
    campaignId: String
    endDate: Date!
    resolution: AnalyticsResolution
    startDate: Date!
  ): YoutubePopMetrics
}

type YoutubeCampaignPerformanceValue implements BaseCampaignPerformanceValue & BaseYoutubePerformanceValue {
  campaignId: String!
  campaignName: String
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: CurrencyDTO
  costPerConversion: CurrencyDTO
  ctr: Float!
  impressions: Float!
  spend: CurrencyDTO
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

type YoutubeCreativeMetricsResponse {
  interval: AnalyticsInterval!
  value: YoutubeCreativeValue!
}

type YoutubeCreativeValue implements BaseGoogleCreativeValue {
  adName: String!
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  creative: Creative!
  creativeId: String!
  ctr: Float!
  impressions: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

type YoutubeGeoMetricsResponse {
  interval: AnalyticsInterval!
  value: YoutubeGeoValue!
}

type YoutubeGeoValue implements BaseGeoValue {
  boundary: MapboxBoundary
  city: String
  clicks: Float!
  conversions: Float!
  coordinates: LatLongType
  country: String!
  impressions: Float!
  location: String!
  region: String!
  viewRate: Float!
  views: Float!
  zip: String
}

type YoutubePopMetrics {
  clicks: Float!
  conversionRate: Float!
  conversions: Float!
  costPerClick: Float!
  costPerConversion: Float!
  ctr: Float!
  impressions: Float!
  spend: Float!
  view25PctCompletionRate: Float!
  view50PctCompletionRate: Float!
  view75PctCompletionRate: Float!
  viewCompletionRate: Float!
  viewRate: Float!
  views: Float!
  views25PctCompleted: Float!
  views50PctCompleted: Float!
  views75PctCompleted: Float!
  viewsCompleted: Float!
}

"""
Input for `dapi_createOrder`.
"""
input dapi_CreateOrderInput {
  """
  The advertiser ID for which the order is being created for.
  """
  advertiserId: ID!

  """
  The user ID that is assigned to the order.
  """
  assigneeUserId: ID

  """
  The user ID that created the order. If null, attempts to fallback to the detected user making the request.
  """
  createdByUserId: ID

  """
  The date that this entity became an official order. This will be applied to any existing line items.
  """
  dateOfOrder: Date

  """
  The associated line items to create.
  """
  lineItems: [LineItemInput!]

  """
  The name of the order.
  """
  name: String!

  """
  Custom information specific to the order.
  """
  orderInfo: JSON

  """
  An optional email address that represents the external user that this order was created for.
  This should only be set when creating an order for an external user that does not exist in our system.
  """
  ownerEmail: String

  """
  The proposed date to end the order.
  """
  proposedEndDate: Date

  """
  The proposed date to start the order.
  """
  proposedStartDate: Date

  """
  The requesting user's id. Defaults to the creator of the order if null or empty.
  """
  requesterUserId: ID

  """
  The source of the order
  """
  source: OrderSource!

  """
  The state of the order. If not provided, a default state will be determined based on other info provided
  """
  state: OrderState
}
